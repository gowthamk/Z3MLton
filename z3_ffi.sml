(*
 * Automatically generated by makesml CIL plugin
 *)
structure Z3_FFI : Z3_FFI_INTERFACE =
struct
  type z3_ast_vector = MLton.Pointer.t
  type z3_ast_kind = MLton.Pointer.t
  type z3_ast_map = MLton.Pointer.t
  type z3_constructor = MLton.Pointer.t
  type z3_constructor_list = MLton.Pointer.t
  type z3_parameter_kind = MLton.Pointer.t
  type z3_stats = MLton.Pointer.t
  type z3_probe = MLton.Pointer.t
  type z3_bool = MLton.Pointer.t
  type z3_sort = MLton.Pointer.t
  type z3_error_code = MLton.Pointer.t
  type z3_theory = MLton.Pointer.t
  type z3_theory_data = MLton.Pointer.t
  type z3_func_interp = MLton.Pointer.t
  type z3_goal = MLton.Pointer.t
  type z3_params = MLton.Pointer.t
  type z3_model = MLton.Pointer.t
  type z3_pattern = MLton.Pointer.t
  type z3_apply_result = MLton.Pointer.t
  type z3_func_entry = MLton.Pointer.t
  type z3_sort_kind = MLton.Pointer.t
  type z3_lbool = MLton.Pointer.t
  type z3_string_ptr = MLton.Pointer.t
  type z3_param_descrs = MLton.Pointer.t
  type z3_symbol_kind = MLton.Pointer.t
  type z3_goal_prec = MLton.Pointer.t
  type z3_solver = MLton.Pointer.t
  type z3_func_decl = MLton.Pointer.t
  type z3_config = MLton.Pointer.t
  type z3_context = MLton.Pointer.t
  type z3_app = MLton.Pointer.t
  type z3_symbol = MLton.Pointer.t
  type z3_fixedpoint = MLton.Pointer.t
  type z3_ast = MLton.Pointer.t
  type z3_param_kind = MLton.Pointer.t
  type z3_decl_kind = MLton.Pointer.t
  type z3_string = MLton.Pointer.t
  type z3_ast_print_mode = MLton.Pointer.t
  type z3_search_failure = MLton.Pointer.t
  type z3_literals = MLton.Pointer.t
  type z3_tactic = MLton.Pointer.t


  fun Z3_fixedpoint_add_rule (c,d,rule,name) = 
  let
    val dyn_Z3_fixedpoint_add_rule = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint * z3_ast * z3_symbol) -> unit;
    val Z3_fixedpoint_add_rule_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_add_rule")
  in
    dyn_Z3_fixedpoint_add_rule Z3_fixedpoint_add_rule_ptr (c,d,rule,name)
  end

  fun Z3_model_get_func_interp (c,m,f) = 
  let
    val dyn_Z3_model_get_func_interp = _import * : DynLink.fptr -> (z3_context * z3_model * z3_func_decl) -> z3_func_interp;
    val Z3_model_get_func_interp_ptr = DynLink.dlsym(hndl, "Z3_model_get_func_interp")
  in
    dyn_Z3_model_get_func_interp Z3_model_get_func_interp_ptr (c,m,f)
  end

  fun Z3_theory_mk_sort (c,t,s) = 
  let
    val dyn_Z3_theory_mk_sort = _import * : DynLink.fptr -> (z3_context * z3_theory * z3_symbol) -> z3_sort;
    val Z3_theory_mk_sort_ptr = DynLink.dlsym(hndl, "Z3_theory_mk_sort")
  in
    dyn_Z3_theory_mk_sort Z3_theory_mk_sort_ptr (c,t,s)
  end

  fun Z3_mk_distinct (c,num_args,args) = 
  let
    val dyn_Z3_mk_distinct = _import * : DynLink.fptr -> (z3_context * int * MLton.Pointer.t) -> z3_ast;
    val Z3_mk_distinct_ptr = DynLink.dlsym(hndl, "Z3_mk_distinct")
  in
    dyn_Z3_mk_distinct Z3_mk_distinct_ptr (c,num_args,args)
  end

  fun Z3_goal_assert (c,g,a) = 
  let
    val dyn_Z3_goal_assert = _import * : DynLink.fptr -> (z3_context * z3_goal * z3_ast) -> unit;
    val Z3_goal_assert_ptr = DynLink.dlsym(hndl, "Z3_goal_assert")
  in
    dyn_Z3_goal_assert Z3_goal_assert_ptr (c,g,a)
  end

  fun Z3_simplify_ex (c,a,p) = 
  let
    val dyn_Z3_simplify_ex = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_params) -> z3_ast;
    val Z3_simplify_ex_ptr = DynLink.dlsym(hndl, "Z3_simplify_ex")
  in
    dyn_Z3_simplify_ex Z3_simplify_ex_ptr (c,a,p)
  end

  fun Z3_mk_is_int (c,t1) = 
  let
    val dyn_Z3_mk_is_int = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_ast;
    val Z3_mk_is_int_ptr = DynLink.dlsym(hndl, "Z3_mk_is_int")
  in
    dyn_Z3_mk_is_int Z3_mk_is_int_ptr (c,t1)
  end

  fun Z3_param_descrs_to_string (c,p) = 
  let
    val dyn_Z3_param_descrs_to_string = _import * : DynLink.fptr -> (z3_context * z3_param_descrs) -> z3_string;
    val Z3_param_descrs_to_string_ptr = DynLink.dlsym(hndl, "Z3_param_descrs_to_string")
  in
    dyn_Z3_param_descrs_to_string Z3_param_descrs_to_string_ptr (c,p)
  end

  fun Z3_get_quantifier_bound_name (c,a,i) = 
  let
    val dyn_Z3_get_quantifier_bound_name = _import * : DynLink.fptr -> (z3_context * z3_ast * int) -> z3_symbol;
    val Z3_get_quantifier_bound_name_ptr = DynLink.dlsym(hndl, "Z3_get_quantifier_bound_name")
  in
    dyn_Z3_get_quantifier_bound_name Z3_get_quantifier_bound_name_ptr (c,a,i)
  end

  fun Z3_mk_solver_for_logic (c,logic) = 
  let
    val dyn_Z3_mk_solver_for_logic = _import * : DynLink.fptr -> (z3_context * z3_symbol) -> z3_solver;
    val Z3_mk_solver_for_logic_ptr = DynLink.dlsym(hndl, "Z3_mk_solver_for_logic")
  in
    dyn_Z3_mk_solver_for_logic Z3_mk_solver_for_logic_ptr (c,logic)
  end

  fun Z3_get_pattern_num_terms (c,p) = 
  let
    val dyn_Z3_get_pattern_num_terms = _import * : DynLink.fptr -> (z3_context * z3_pattern) -> int;
    val Z3_get_pattern_num_terms_ptr = DynLink.dlsym(hndl, "Z3_get_pattern_num_terms")
  in
    dyn_Z3_get_pattern_num_terms Z3_get_pattern_num_terms_ptr (c,p)
  end

  fun Z3_ast_map_keys (c,m) = 
  let
    val dyn_Z3_ast_map_keys = _import * : DynLink.fptr -> (z3_context * z3_ast_map) -> z3_ast_vector;
    val Z3_ast_map_keys_ptr = DynLink.dlsym(hndl, "Z3_ast_map_keys")
  in
    dyn_Z3_ast_map_keys Z3_ast_map_keys_ptr (c,m)
  end

  fun Z3_func_interp_inc_ref (c,f) = 
  let
    val dyn_Z3_func_interp_inc_ref = _import * : DynLink.fptr -> (z3_context * z3_func_interp) -> unit;
    val Z3_func_interp_inc_ref_ptr = DynLink.dlsym(hndl, "Z3_func_interp_inc_ref")
  in
    dyn_Z3_func_interp_inc_ref Z3_func_interp_inc_ref_ptr (c,f)
  end

  fun Z3_apply_result_get_num_subgoals (c,r) = 
  let
    val dyn_Z3_apply_result_get_num_subgoals = _import * : DynLink.fptr -> (z3_context * z3_apply_result) -> int;
    val Z3_apply_result_get_num_subgoals_ptr = DynLink.dlsym(hndl, "Z3_apply_result_get_num_subgoals")
  in
    dyn_Z3_apply_result_get_num_subgoals Z3_apply_result_get_num_subgoals_ptr (c,r)
  end

  fun Z3_ast_map_contains (c,m,k) = 
  let
    val dyn_Z3_ast_map_contains = _import * : DynLink.fptr -> (z3_context * z3_ast_map * z3_ast) -> z3_bool;
    val Z3_ast_map_contains_ptr = DynLink.dlsym(hndl, "Z3_ast_map_contains")
  in
    dyn_Z3_ast_map_contains Z3_ast_map_contains_ptr (c,m,k)
  end

  fun Z3_stats_is_double (c,s,idx) = 
  let
    val dyn_Z3_stats_is_double = _import * : DynLink.fptr -> (z3_context * z3_stats * int) -> z3_bool;
    val Z3_stats_is_double_ptr = DynLink.dlsym(hndl, "Z3_stats_is_double")
  in
    dyn_Z3_stats_is_double Z3_stats_is_double_ptr (c,s,idx)
  end

  fun Z3_solver_reset (c,s) = 
  let
    val dyn_Z3_solver_reset = _import * : DynLink.fptr -> (z3_context * z3_solver) -> unit;
    val Z3_solver_reset_ptr = DynLink.dlsym(hndl, "Z3_solver_reset")
  in
    dyn_Z3_solver_reset Z3_solver_reset_ptr (c,s)
  end

  fun Z3_mk_set_intersect (c,num_args,args) = 
  let
    val dyn_Z3_mk_set_intersect = _import * : DynLink.fptr -> (z3_context * int * MLton.Pointer.t) -> z3_ast;
    val Z3_mk_set_intersect_ptr = DynLink.dlsym(hndl, "Z3_mk_set_intersect")
  in
    dyn_Z3_mk_set_intersect Z3_mk_set_intersect_ptr (c,num_args,args)
  end

  fun Z3_param_descrs_inc_ref (c,p) = 
  let
    val dyn_Z3_param_descrs_inc_ref = _import * : DynLink.fptr -> (z3_context * z3_param_descrs) -> unit;
    val Z3_param_descrs_inc_ref_ptr = DynLink.dlsym(hndl, "Z3_param_descrs_inc_ref")
  in
    dyn_Z3_param_descrs_inc_ref Z3_param_descrs_inc_ref_ptr (c,p)
  end

  fun Z3_mk_zero_ext (c,i,t1) = 
  let
    val dyn_Z3_mk_zero_ext = _import * : DynLink.fptr -> (z3_context * int * z3_ast) -> z3_ast;
    val Z3_mk_zero_ext_ptr = DynLink.dlsym(hndl, "Z3_mk_zero_ext")
  in
    dyn_Z3_mk_zero_ext Z3_mk_zero_ext_ptr (c,i,t1)
  end

  fun Z3_goal_translate (source,g,target) = 
  let
    val dyn_Z3_goal_translate = _import * : DynLink.fptr -> (z3_context * z3_goal * z3_context) -> z3_goal;
    val Z3_goal_translate_ptr = DynLink.dlsym(hndl, "Z3_goal_translate")
  in
    dyn_Z3_goal_translate Z3_goal_translate_ptr (source,g,target)
  end

  fun Z3_to_app (c,a) = 
  let
    val dyn_Z3_to_app = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_app;
    val Z3_to_app_ptr = DynLink.dlsym(hndl, "Z3_to_app")
  in
    dyn_Z3_to_app Z3_to_app_ptr (c,a)
  end

  fun Z3_mk_bvlshr (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvlshr = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvlshr_ptr = DynLink.dlsym(hndl, "Z3_mk_bvlshr")
  in
    dyn_Z3_mk_bvlshr Z3_mk_bvlshr_ptr (c,t1,t2)
  end

  fun Z3_global_param_reset_all () = 
  let
    val dyn_Z3_global_param_reset_all = _import * : DynLink.fptr -> unit -> unit;
    val Z3_global_param_reset_all_ptr = DynLink.dlsym(hndl, "Z3_global_param_reset_all")
  in
    dyn_Z3_global_param_reset_all Z3_global_param_reset_all_ptr ()
  end

  fun Z3_append_log (string) = 
  let
    val dyn_Z3_append_log = _import * : DynLink.fptr -> (z3_string) -> unit;
    val Z3_append_log_ptr = DynLink.dlsym(hndl, "Z3_append_log")
  in
    dyn_Z3_append_log Z3_append_log_ptr (string)
  end

  fun Z3_mk_quantifier_ex (c,is_forall,weight,quantifier_id,skolem_id,num_patterns,patterns,num_no_patterns,no_patterns,num_decls,sorts,decl_names,body) = 
  let
    val dyn_Z3_mk_quantifier_ex = _import * : DynLink.fptr -> (z3_context * z3_bool * int * z3_symbol * z3_symbol * int * MLton.Pointer.t * int * MLton.Pointer.t * int * MLton.Pointer.t * MLton.Pointer.t * z3_ast) -> z3_ast;
    val Z3_mk_quantifier_ex_ptr = DynLink.dlsym(hndl, "Z3_mk_quantifier_ex")
  in
    dyn_Z3_mk_quantifier_ex Z3_mk_quantifier_ex_ptr (c,is_forall,weight,quantifier_id,skolem_id,num_patterns,patterns,num_no_patterns,no_patterns,num_decls,sorts,decl_names,body)
  end

  fun Z3_mk_label (c,s,is_pos,f) = 
  let
    val dyn_Z3_mk_label = _import * : DynLink.fptr -> (z3_context * z3_symbol * z3_bool * z3_ast) -> z3_ast;
    val Z3_mk_label_ptr = DynLink.dlsym(hndl, "Z3_mk_label")
  in
    dyn_Z3_mk_label Z3_mk_label_ptr (c,s,is_pos,f)
  end

  fun Z3_mk_ext_rotate_left (c,t1,t2) = 
  let
    val dyn_Z3_mk_ext_rotate_left = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_ext_rotate_left_ptr = DynLink.dlsym(hndl, "Z3_mk_ext_rotate_left")
  in
    dyn_Z3_mk_ext_rotate_left Z3_mk_ext_rotate_left_ptr (c,t1,t2)
  end

  fun Z3_del_model (c,m) = 
  let
    val dyn_Z3_del_model = _import * : DynLink.fptr -> (z3_context * z3_model) -> unit;
    val Z3_del_model_ptr = DynLink.dlsym(hndl, "Z3_del_model")
  in
    dyn_Z3_del_model Z3_del_model_ptr (c,m)
  end

  fun Z3_stats_get_uint_value (c,s,idx) = 
  let
    val dyn_Z3_stats_get_uint_value = _import * : DynLink.fptr -> (z3_context * z3_stats * int) -> int;
    val Z3_stats_get_uint_value_ptr = DynLink.dlsym(hndl, "Z3_stats_get_uint_value")
  in
    dyn_Z3_stats_get_uint_value Z3_stats_get_uint_value_ptr (c,s,idx)
  end

  fun Z3_params_set_symbol (c,p,k,v) = 
  let
    val dyn_Z3_params_set_symbol = _import * : DynLink.fptr -> (z3_context * z3_params * z3_symbol * z3_symbol) -> unit;
    val Z3_params_set_symbol_ptr = DynLink.dlsym(hndl, "Z3_params_set_symbol")
  in
    dyn_Z3_params_set_symbol Z3_params_set_symbol_ptr (c,p,k,v)
  end

  fun Z3_solver_inc_ref (c,s) = 
  let
    val dyn_Z3_solver_inc_ref = _import * : DynLink.fptr -> (z3_context * z3_solver) -> unit;
    val Z3_solver_inc_ref_ptr = DynLink.dlsym(hndl, "Z3_solver_inc_ref")
  in
    dyn_Z3_solver_inc_ref Z3_solver_inc_ref_ptr (c,s)
  end

  fun Z3_get_tuple_sort_field_decl (c,t,i) = 
  let
    val dyn_Z3_get_tuple_sort_field_decl = _import * : DynLink.fptr -> (z3_context * z3_sort * int) -> z3_func_decl;
    val Z3_get_tuple_sort_field_decl_ptr = DynLink.dlsym(hndl, "Z3_get_tuple_sort_field_decl")
  in
    dyn_Z3_get_tuple_sort_field_decl Z3_get_tuple_sort_field_decl_ptr (c,t,i)
  end

  fun Z3_mk_extract (c,high,low,t1) = 
  let
    val dyn_Z3_mk_extract = _import * : DynLink.fptr -> (z3_context * int * int * z3_ast) -> z3_ast;
    val Z3_mk_extract_ptr = DynLink.dlsym(hndl, "Z3_mk_extract")
  in
    dyn_Z3_mk_extract Z3_mk_extract_ptr (c,high,low,t1)
  end

  fun Z3_fixedpoint_set_params (c,f,p) = 
  let
    val dyn_Z3_fixedpoint_set_params = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint * z3_params) -> unit;
    val Z3_fixedpoint_set_params_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_set_params")
  in
    dyn_Z3_fixedpoint_set_params Z3_fixedpoint_set_params_ptr (c,f,p)
  end

  fun Z3_substitute_vars (c,a,num_exprs,to) = 
  let
    val dyn_Z3_substitute_vars = _import * : DynLink.fptr -> (z3_context * z3_ast * int * MLton.Pointer.t) -> z3_ast;
    val Z3_substitute_vars_ptr = DynLink.dlsym(hndl, "Z3_substitute_vars")
  in
    dyn_Z3_substitute_vars Z3_substitute_vars_ptr (c,a,num_exprs,to)
  end

  fun Z3_get_param_value (c,param_id,param_value) = 
  let
    val dyn_Z3_get_param_value = _import * : DynLink.fptr -> (z3_context * z3_string * z3_string_ptr) -> z3_bool;
    val Z3_get_param_value_ptr = DynLink.dlsym(hndl, "Z3_get_param_value")
  in
    dyn_Z3_get_param_value Z3_get_param_value_ptr (c,param_id,param_value)
  end

  fun Z3_pop (c,num_scopes) = 
  let
    val dyn_Z3_pop = _import * : DynLink.fptr -> (z3_context * int) -> unit;
    val Z3_pop_ptr = DynLink.dlsym(hndl, "Z3_pop")
  in
    dyn_Z3_pop Z3_pop_ptr (c,num_scopes)
  end

  fun Z3_mk_func_decl (c,s,domain_size,domain,range) = 
  let
    val dyn_Z3_mk_func_decl = _import * : DynLink.fptr -> (z3_context * z3_symbol * int * MLton.Pointer.t * z3_sort) -> z3_func_decl;
    val Z3_mk_func_decl_ptr = DynLink.dlsym(hndl, "Z3_mk_func_decl")
  in
    dyn_Z3_mk_func_decl Z3_mk_func_decl_ptr (c,s,domain_size,domain,range)
  end

  fun Z3_ast_vector_size (c,v) = 
  let
    val dyn_Z3_ast_vector_size = _import * : DynLink.fptr -> (z3_context * z3_ast_vector) -> int;
    val Z3_ast_vector_size_ptr = DynLink.dlsym(hndl, "Z3_ast_vector_size")
  in
    dyn_Z3_ast_vector_size Z3_ast_vector_size_ptr (c,v)
  end

  fun Z3_is_app (c,a) = 
  let
    val dyn_Z3_is_app = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_bool;
    val Z3_is_app_ptr = DynLink.dlsym(hndl, "Z3_is_app")
  in
    dyn_Z3_is_app Z3_is_app_ptr (c,a)
  end

  fun Z3_mk_enumeration_sort (c,name,n,enum_names,enum_consts,enum_testers) = 
  let
    val dyn_Z3_mk_enumeration_sort = _import * : DynLink.fptr -> (z3_context * z3_symbol * int * MLton.Pointer.t * MLton.Pointer.t * MLton.Pointer.t) -> z3_sort;
    val Z3_mk_enumeration_sort_ptr = DynLink.dlsym(hndl, "Z3_mk_enumeration_sort")
  in
    dyn_Z3_mk_enumeration_sort Z3_mk_enumeration_sort_ptr (c,name,n,enum_names,enum_consts,enum_testers)
  end

  fun Z3_mk_bvugt (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvugt = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvugt_ptr = DynLink.dlsym(hndl, "Z3_mk_bvugt")
  in
    dyn_Z3_mk_bvugt Z3_mk_bvugt_ptr (c,t1,t2)
  end

  fun Z3_theory_is_decl (t,d) = 
  let
    val dyn_Z3_theory_is_decl = _import * : DynLink.fptr -> (z3_theory * z3_func_decl) -> z3_bool;
    val Z3_theory_is_decl_ptr = DynLink.dlsym(hndl, "Z3_theory_is_decl")
  in
    dyn_Z3_theory_is_decl Z3_theory_is_decl_ptr (t,d)
  end

  fun Z3_get_domain_size (c,d) = 
  let
    val dyn_Z3_get_domain_size = _import * : DynLink.fptr -> (z3_context * z3_func_decl) -> int;
    val Z3_get_domain_size_ptr = DynLink.dlsym(hndl, "Z3_get_domain_size")
  in
    dyn_Z3_get_domain_size Z3_get_domain_size_ptr (c,d)
  end

  fun Z3_fixedpoint_query_relations (c,d,num_relations,relations) = 
  let
    val dyn_Z3_fixedpoint_query_relations = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint * int * MLton.Pointer.t) -> z3_lbool;
    val Z3_fixedpoint_query_relations_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_query_relations")
  in
    dyn_Z3_fixedpoint_query_relations Z3_fixedpoint_query_relations_ptr (c,d,num_relations,relations)
  end

  fun Z3_set_push_callback (t,f) = 
  let
    val dyn_Z3_set_push_callback = _import * : DynLink.fptr -> (z3_theory * MLton.Pointer.t) -> unit;
    val Z3_set_push_callback_ptr = DynLink.dlsym(hndl, "Z3_set_push_callback")
  in
    dyn_Z3_set_push_callback Z3_set_push_callback_ptr (t,f)
  end

  fun Z3_mk_numeral (c,numeral,ty) = 
  let
    val dyn_Z3_mk_numeral = _import * : DynLink.fptr -> (z3_context * z3_string * z3_sort) -> z3_ast;
    val Z3_mk_numeral_ptr = DynLink.dlsym(hndl, "Z3_mk_numeral")
  in
    dyn_Z3_mk_numeral Z3_mk_numeral_ptr (c,numeral,ty)
  end

  fun Z3_parse_smtlib_string (c,str,num_sorts,sort_names,sorts,num_decls,decl_names,decls) = 
  let
    val dyn_Z3_parse_smtlib_string = _import * : DynLink.fptr -> (z3_context * z3_string * int * MLton.Pointer.t * MLton.Pointer.t * int * MLton.Pointer.t * MLton.Pointer.t) -> unit;
    val Z3_parse_smtlib_string_ptr = DynLink.dlsym(hndl, "Z3_parse_smtlib_string")
  in
    dyn_Z3_parse_smtlib_string Z3_parse_smtlib_string_ptr (c,str,num_sorts,sort_names,sorts,num_decls,decl_names,decls)
  end

  fun Z3_solver_get_param_descrs (c,s) = 
  let
    val dyn_Z3_solver_get_param_descrs = _import * : DynLink.fptr -> (z3_context * z3_solver) -> z3_param_descrs;
    val Z3_solver_get_param_descrs_ptr = DynLink.dlsym(hndl, "Z3_solver_get_param_descrs")
  in
    dyn_Z3_solver_get_param_descrs Z3_solver_get_param_descrs_ptr (c,s)
  end

  fun Z3_tactic_fail_if_not_decided (c) = 
  let
    val dyn_Z3_tactic_fail_if_not_decided = _import * : DynLink.fptr -> (z3_context) -> z3_tactic;
    val Z3_tactic_fail_if_not_decided_ptr = DynLink.dlsym(hndl, "Z3_tactic_fail_if_not_decided")
  in
    dyn_Z3_tactic_fail_if_not_decided Z3_tactic_fail_if_not_decided_ptr (c)
  end

  fun Z3_get_relevant_labels (c) = 
  let
    val dyn_Z3_get_relevant_labels = _import * : DynLink.fptr -> (z3_context) -> z3_literals;
    val Z3_get_relevant_labels_ptr = DynLink.dlsym(hndl, "Z3_get_relevant_labels")
  in
    dyn_Z3_get_relevant_labels Z3_get_relevant_labels_ptr (c)
  end

  fun Z3_get_tuple_sort_num_fields (c,t) = 
  let
    val dyn_Z3_get_tuple_sort_num_fields = _import * : DynLink.fptr -> (z3_context * z3_sort) -> int;
    val Z3_get_tuple_sort_num_fields_ptr = DynLink.dlsym(hndl, "Z3_get_tuple_sort_num_fields")
  in
    dyn_Z3_get_tuple_sort_num_fields Z3_get_tuple_sort_num_fields_ptr (c,t)
  end

  fun Z3_get_tactic_name (c,i) = 
  let
    val dyn_Z3_get_tactic_name = _import * : DynLink.fptr -> (z3_context * int) -> z3_string;
    val Z3_get_tactic_name_ptr = DynLink.dlsym(hndl, "Z3_get_tactic_name")
  in
    dyn_Z3_get_tactic_name Z3_get_tactic_name_ptr (c,i)
  end

  fun Z3_probe_gt (x,p1,p2) = 
  let
    val dyn_Z3_probe_gt = _import * : DynLink.fptr -> (z3_context * z3_probe * z3_probe) -> z3_probe;
    val Z3_probe_gt_ptr = DynLink.dlsym(hndl, "Z3_probe_gt")
  in
    dyn_Z3_probe_gt Z3_probe_gt_ptr (x,p1,p2)
  end

  fun Z3_mk_quantifier (c,is_forall,weight,num_patterns,patterns,num_decls,sorts,decl_names,body) = 
  let
    val dyn_Z3_mk_quantifier = _import * : DynLink.fptr -> (z3_context * z3_bool * int * int * MLton.Pointer.t * int * MLton.Pointer.t * MLton.Pointer.t * z3_ast) -> z3_ast;
    val Z3_mk_quantifier_ptr = DynLink.dlsym(hndl, "Z3_mk_quantifier")
  in
    dyn_Z3_mk_quantifier Z3_mk_quantifier_ptr (c,is_forall,weight,num_patterns,patterns,num_decls,sorts,decl_names,body)
  end

  fun Z3_tactic_fail_if (c,p) = 
  let
    val dyn_Z3_tactic_fail_if = _import * : DynLink.fptr -> (z3_context * z3_probe) -> z3_tactic;
    val Z3_tactic_fail_if_ptr = DynLink.dlsym(hndl, "Z3_tactic_fail_if")
  in
    dyn_Z3_tactic_fail_if Z3_tactic_fail_if_ptr (c,p)
  end

  fun Z3_set_error (c,e) = 
  let
    val dyn_Z3_set_error = _import * : DynLink.fptr -> (z3_context * z3_error_code) -> unit;
    val Z3_set_error_ptr = DynLink.dlsym(hndl, "Z3_set_error")
  in
    dyn_Z3_set_error Z3_set_error_ptr (c,e)
  end

  fun Z3_fixedpoint_assert (c,d,axiom) = 
  let
    val dyn_Z3_fixedpoint_assert = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint * z3_ast) -> unit;
    val Z3_fixedpoint_assert_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_assert")
  in
    dyn_Z3_fixedpoint_assert Z3_fixedpoint_assert_ptr (c,d,axiom)
  end

  fun Z3_ast_map_reset (c,m) = 
  let
    val dyn_Z3_ast_map_reset = _import * : DynLink.fptr -> (z3_context * z3_ast_map) -> unit;
    val Z3_ast_map_reset_ptr = DynLink.dlsym(hndl, "Z3_ast_map_reset")
  in
    dyn_Z3_ast_map_reset Z3_ast_map_reset_ptr (c,m)
  end

  fun Z3_theory_get_parent (t,n,i) = 
  let
    val dyn_Z3_theory_get_parent = _import * : DynLink.fptr -> (z3_theory * z3_ast * int) -> z3_ast;
    val Z3_theory_get_parent_ptr = DynLink.dlsym(hndl, "Z3_theory_get_parent")
  in
    dyn_Z3_theory_get_parent Z3_theory_get_parent_ptr (t,n,i)
  end

  fun Z3_mk_bvxnor (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvxnor = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvxnor_ptr = DynLink.dlsym(hndl, "Z3_mk_bvxnor")
  in
    dyn_Z3_mk_bvxnor Z3_mk_bvxnor_ptr (c,t1,t2)
  end

  fun Z3_get_symbol_string (c,s) = 
  let
    val dyn_Z3_get_symbol_string = _import * : DynLink.fptr -> (z3_context * z3_symbol) -> z3_string;
    val Z3_get_symbol_string_ptr = DynLink.dlsym(hndl, "Z3_get_symbol_string")
  in
    dyn_Z3_get_symbol_string Z3_get_symbol_string_ptr (c,s)
  end

  fun Z3_get_relevant_literals (c) = 
  let
    val dyn_Z3_get_relevant_literals = _import * : DynLink.fptr -> (z3_context) -> z3_literals;
    val Z3_get_relevant_literals_ptr = DynLink.dlsym(hndl, "Z3_get_relevant_literals")
  in
    dyn_Z3_get_relevant_literals Z3_get_relevant_literals_ptr (c)
  end

  fun Z3_mk_bvmul_no_underflow (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvmul_no_underflow = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvmul_no_underflow_ptr = DynLink.dlsym(hndl, "Z3_mk_bvmul_no_underflow")
  in
    dyn_Z3_mk_bvmul_no_underflow Z3_mk_bvmul_no_underflow_ptr (c,t1,t2)
  end

  fun Z3_get_relation_arity (c,s) = 
  let
    val dyn_Z3_get_relation_arity = _import * : DynLink.fptr -> (z3_context * z3_sort) -> int;
    val Z3_get_relation_arity_ptr = DynLink.dlsym(hndl, "Z3_get_relation_arity")
  in
    dyn_Z3_get_relation_arity Z3_get_relation_arity_ptr (c,s)
  end

  fun Z3_get_pattern (c,p,idx) = 
  let
    val dyn_Z3_get_pattern = _import * : DynLink.fptr -> (z3_context * z3_pattern * int) -> z3_ast;
    val Z3_get_pattern_ptr = DynLink.dlsym(hndl, "Z3_get_pattern")
  in
    dyn_Z3_get_pattern Z3_get_pattern_ptr (c,p,idx)
  end

  fun Z3_get_numeral_uint64 (c,v,u) = 
  let
    val dyn_Z3_get_numeral_uint64 = _import * : DynLink.fptr -> (z3_context * z3_ast * MLton.Pointer.t) -> z3_bool;
    val Z3_get_numeral_uint64_ptr = DynLink.dlsym(hndl, "Z3_get_numeral_uint64")
  in
    dyn_Z3_get_numeral_uint64 Z3_get_numeral_uint64_ptr (c,v,u)
  end

  fun Z3_solver_assert (c,s,a) = 
  let
    val dyn_Z3_solver_assert = _import * : DynLink.fptr -> (z3_context * z3_solver * z3_ast) -> unit;
    val Z3_solver_assert_ptr = DynLink.dlsym(hndl, "Z3_solver_assert")
  in
    dyn_Z3_solver_assert Z3_solver_assert_ptr (c,s,a)
  end

  fun Z3_goal_formula (c,g,idx) = 
  let
    val dyn_Z3_goal_formula = _import * : DynLink.fptr -> (z3_context * z3_goal * int) -> z3_ast;
    val Z3_goal_formula_ptr = DynLink.dlsym(hndl, "Z3_goal_formula")
  in
    dyn_Z3_goal_formula Z3_goal_formula_ptr (c,g,idx)
  end

  fun Z3_goal_is_decided_sat (c,g) = 
  let
    val dyn_Z3_goal_is_decided_sat = _import * : DynLink.fptr -> (z3_context * z3_goal) -> z3_bool;
    val Z3_goal_is_decided_sat_ptr = DynLink.dlsym(hndl, "Z3_goal_is_decided_sat")
  in
    dyn_Z3_goal_is_decided_sat Z3_goal_is_decided_sat_ptr (c,g)
  end

  fun Z3_theory_enable_axiom_simplification (t,flag) = 
  let
    val dyn_Z3_theory_enable_axiom_simplification = _import * : DynLink.fptr -> (z3_theory * z3_bool) -> unit;
    val Z3_theory_enable_axiom_simplification_ptr = DynLink.dlsym(hndl, "Z3_theory_enable_axiom_simplification")
  in
    dyn_Z3_theory_enable_axiom_simplification Z3_theory_enable_axiom_simplification_ptr (t,flag)
  end

  fun Z3_func_interp_dec_ref (c,f) = 
  let
    val dyn_Z3_func_interp_dec_ref = _import * : DynLink.fptr -> (z3_context * z3_func_interp) -> unit;
    val Z3_func_interp_dec_ref_ptr = DynLink.dlsym(hndl, "Z3_func_interp_dec_ref")
  in
    dyn_Z3_func_interp_dec_ref Z3_func_interp_dec_ref_ptr (c,f)
  end

  fun Z3_mk_or (c,num_args,args) = 
  let
    val dyn_Z3_mk_or = _import * : DynLink.fptr -> (z3_context * int * MLton.Pointer.t) -> z3_ast;
    val Z3_mk_or_ptr = DynLink.dlsym(hndl, "Z3_mk_or")
  in
    dyn_Z3_mk_or Z3_mk_or_ptr (c,num_args,args)
  end

  fun Z3_tactic_dec_ref (c,g) = 
  let
    val dyn_Z3_tactic_dec_ref = _import * : DynLink.fptr -> (z3_context * z3_tactic) -> unit;
    val Z3_tactic_dec_ref_ptr = DynLink.dlsym(hndl, "Z3_tactic_dec_ref")
  in
    dyn_Z3_tactic_dec_ref Z3_tactic_dec_ref_ptr (c,g)
  end

  fun Z3_mk_app (c,d,num_args,args) = 
  let
    val dyn_Z3_mk_app = _import * : DynLink.fptr -> (z3_context * z3_func_decl * int * MLton.Pointer.t) -> z3_ast;
    val Z3_mk_app_ptr = DynLink.dlsym(hndl, "Z3_mk_app")
  in
    dyn_Z3_mk_app Z3_mk_app_ptr (c,d,num_args,args)
  end

  fun Z3_mk_int (c,v,ty) = 
  let
    val dyn_Z3_mk_int = _import * : DynLink.fptr -> (z3_context * int * z3_sort) -> z3_ast;
    val Z3_mk_int_ptr = DynLink.dlsym(hndl, "Z3_mk_int")
  in
    dyn_Z3_mk_int Z3_mk_int_ptr (c,v,ty)
  end

  fun Z3_mk_bvule (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvule = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvule_ptr = DynLink.dlsym(hndl, "Z3_mk_bvule")
  in
    dyn_Z3_mk_bvule Z3_mk_bvule_ptr (c,t1,t2)
  end

  fun Z3_mk_le (c,t1,t2) = 
  let
    val dyn_Z3_mk_le = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_le_ptr = DynLink.dlsym(hndl, "Z3_mk_le")
  in
    dyn_Z3_mk_le Z3_mk_le_ptr (c,t1,t2)
  end

  fun Z3_get_quantifier_body (c,a) = 
  let
    val dyn_Z3_get_quantifier_body = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_ast;
    val Z3_get_quantifier_body_ptr = DynLink.dlsym(hndl, "Z3_get_quantifier_body")
  in
    dyn_Z3_get_quantifier_body Z3_get_quantifier_body_ptr (c,a)
  end

  fun Z3_close_log () = 
  let
    val dyn_Z3_close_log = _import * : DynLink.fptr -> unit -> unit;
    val Z3_close_log_ptr = DynLink.dlsym(hndl, "Z3_close_log")
  in
    dyn_Z3_close_log Z3_close_log_ptr ()
  end

  fun Z3_set_error_handler (c,h) = 
  let
    val dyn_Z3_set_error_handler = _import * : DynLink.fptr -> (z3_context * MLton.Pointer.t) -> unit;
    val Z3_set_error_handler_ptr = DynLink.dlsym(hndl, "Z3_set_error_handler")
  in
    dyn_Z3_set_error_handler Z3_set_error_handler_ptr (c,h)
  end

  fun Z3_get_func_decl_id (c,f) = 
  let
    val dyn_Z3_get_func_decl_id = _import * : DynLink.fptr -> (z3_context * z3_func_decl) -> int;
    val Z3_get_func_decl_id_ptr = DynLink.dlsym(hndl, "Z3_get_func_decl_id")
  in
    dyn_Z3_get_func_decl_id Z3_get_func_decl_id_ptr (c,f)
  end

  fun Z3_get_quantifier_num_no_patterns (c,a) = 
  let
    val dyn_Z3_get_quantifier_num_no_patterns = _import * : DynLink.fptr -> (z3_context * z3_ast) -> int;
    val Z3_get_quantifier_num_no_patterns_ptr = DynLink.dlsym(hndl, "Z3_get_quantifier_num_no_patterns")
  in
    dyn_Z3_get_quantifier_num_no_patterns Z3_get_quantifier_num_no_patterns_ptr (c,a)
  end

  fun Z3_ast_vector_translate (s,v,t) = 
  let
    val dyn_Z3_ast_vector_translate = _import * : DynLink.fptr -> (z3_context * z3_ast_vector * z3_context) -> z3_ast_vector;
    val Z3_ast_vector_translate_ptr = DynLink.dlsym(hndl, "Z3_ast_vector_translate")
  in
    dyn_Z3_ast_vector_translate Z3_ast_vector_translate_ptr (s,v,t)
  end

  fun Z3_fixedpoint_add_cover (c,d,level,pred,property) = 
  let
    val dyn_Z3_fixedpoint_add_cover = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint * int * z3_func_decl * z3_ast) -> unit;
    val Z3_fixedpoint_add_cover_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_add_cover")
  in
    dyn_Z3_fixedpoint_add_cover Z3_fixedpoint_add_cover_ptr (c,d,level,pred,property)
  end

  fun Z3_get_array_value (c,m,v,num_entries,indices,values,else_value) = 
  let
    val dyn_Z3_get_array_value = _import * : DynLink.fptr -> (z3_context * z3_model * z3_ast * int * MLton.Pointer.t * MLton.Pointer.t * MLton.Pointer.t) -> unit;
    val Z3_get_array_value_ptr = DynLink.dlsym(hndl, "Z3_get_array_value")
  in
    dyn_Z3_get_array_value Z3_get_array_value_ptr (c,m,v,num_entries,indices,values,else_value)
  end

  fun Z3_app_to_ast (c,a) = 
  let
    val dyn_Z3_app_to_ast = _import * : DynLink.fptr -> (z3_context * z3_app) -> z3_ast;
    val Z3_app_to_ast_ptr = DynLink.dlsym(hndl, "Z3_app_to_ast")
  in
    dyn_Z3_app_to_ast Z3_app_to_ast_ptr (c,a)
  end

  fun Z3_mk_bvsdiv (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvsdiv = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvsdiv_ptr = DynLink.dlsym(hndl, "Z3_mk_bvsdiv")
  in
    dyn_Z3_mk_bvsdiv Z3_mk_bvsdiv_ptr (c,t1,t2)
  end

  fun Z3_mk_rotate_left (c,i,t1) = 
  let
    val dyn_Z3_mk_rotate_left = _import * : DynLink.fptr -> (z3_context * int * z3_ast) -> z3_ast;
    val Z3_mk_rotate_left_ptr = DynLink.dlsym(hndl, "Z3_mk_rotate_left")
  in
    dyn_Z3_mk_rotate_left Z3_mk_rotate_left_ptr (c,i,t1)
  end

  fun Z3_mk_bvuge (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvuge = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvuge_ptr = DynLink.dlsym(hndl, "Z3_mk_bvuge")
  in
    dyn_Z3_mk_bvuge Z3_mk_bvuge_ptr (c,t1,t2)
  end

  fun Z3_goal_size (c,g) = 
  let
    val dyn_Z3_goal_size = _import * : DynLink.fptr -> (z3_context * z3_goal) -> int;
    val Z3_goal_size_ptr = DynLink.dlsym(hndl, "Z3_goal_size")
  in
    dyn_Z3_goal_size Z3_goal_size_ptr (c,g)
  end

  fun Z3_soft_check_cancel (c) = 
  let
    val dyn_Z3_soft_check_cancel = _import * : DynLink.fptr -> (z3_context) -> unit;
    val Z3_soft_check_cancel_ptr = DynLink.dlsym(hndl, "Z3_soft_check_cancel")
  in
    dyn_Z3_soft_check_cancel Z3_soft_check_cancel_ptr (c)
  end

  fun Z3_get_model_func_num_entries (c,m,i) = 
  let
    val dyn_Z3_get_model_func_num_entries = _import * : DynLink.fptr -> (z3_context * z3_model * int) -> int;
    val Z3_get_model_func_num_entries_ptr = DynLink.dlsym(hndl, "Z3_get_model_func_num_entries")
  in
    dyn_Z3_get_model_func_num_entries Z3_get_model_func_num_entries_ptr (c,m,i)
  end

  fun Z3_mk_int_sort (c) = 
  let
    val dyn_Z3_mk_int_sort = _import * : DynLink.fptr -> (z3_context) -> z3_sort;
    val Z3_mk_int_sort_ptr = DynLink.dlsym(hndl, "Z3_mk_int_sort")
  in
    dyn_Z3_mk_int_sort Z3_mk_int_sort_ptr (c)
  end

  fun Z3_mk_bvneg_no_overflow (c,t1) = 
  let
    val dyn_Z3_mk_bvneg_no_overflow = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_ast;
    val Z3_mk_bvneg_no_overflow_ptr = DynLink.dlsym(hndl, "Z3_mk_bvneg_no_overflow")
  in
    dyn_Z3_mk_bvneg_no_overflow Z3_mk_bvneg_no_overflow_ptr (c,t1)
  end

  fun Z3_mk_set_del (c,set,elem) = 
  let
    val dyn_Z3_mk_set_del = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_set_del_ptr = DynLink.dlsym(hndl, "Z3_mk_set_del")
  in
    dyn_Z3_mk_set_del Z3_mk_set_del_ptr (c,set,elem)
  end

  fun Z3_get_ast_kind (c,a) = 
  let
    val dyn_Z3_get_ast_kind = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_ast_kind;
    val Z3_get_ast_kind_ptr = DynLink.dlsym(hndl, "Z3_get_ast_kind")
  in
    dyn_Z3_get_ast_kind Z3_get_ast_kind_ptr (c,a)
  end

  fun Z3_tactic_fail (c) = 
  let
    val dyn_Z3_tactic_fail = _import * : DynLink.fptr -> (z3_context) -> z3_tactic;
    val Z3_tactic_fail_ptr = DynLink.dlsym(hndl, "Z3_tactic_fail")
  in
    dyn_Z3_tactic_fail Z3_tactic_fail_ptr (c)
  end

  fun Z3_set_init_search_callback (t,f) = 
  let
    val dyn_Z3_set_init_search_callback = _import * : DynLink.fptr -> (z3_theory * MLton.Pointer.t) -> unit;
    val Z3_set_init_search_callback_ptr = DynLink.dlsym(hndl, "Z3_set_init_search_callback")
  in
    dyn_Z3_set_init_search_callback Z3_set_init_search_callback_ptr (t,f)
  end

  fun Z3_func_interp_get_entry (c,f,i) = 
  let
    val dyn_Z3_func_interp_get_entry = _import * : DynLink.fptr -> (z3_context * z3_func_interp * int) -> z3_func_entry;
    val Z3_func_interp_get_entry_ptr = DynLink.dlsym(hndl, "Z3_func_interp_get_entry")
  in
    dyn_Z3_func_interp_get_entry Z3_func_interp_get_entry_ptr (c,f,i)
  end

  fun Z3_model_inc_ref (c,m) = 
  let
    val dyn_Z3_model_inc_ref = _import * : DynLink.fptr -> (z3_context * z3_model) -> unit;
    val Z3_model_inc_ref_ptr = DynLink.dlsym(hndl, "Z3_model_inc_ref")
  in
    dyn_Z3_model_inc_ref Z3_model_inc_ref_ptr (c,m)
  end

  fun Z3_solver_push (c,s) = 
  let
    val dyn_Z3_solver_push = _import * : DynLink.fptr -> (z3_context * z3_solver) -> unit;
    val Z3_solver_push_ptr = DynLink.dlsym(hndl, "Z3_solver_push")
  in
    dyn_Z3_solver_push Z3_solver_push_ptr (c,s)
  end

  fun Z3_mk_ast_vector (c) = 
  let
    val dyn_Z3_mk_ast_vector = _import * : DynLink.fptr -> (z3_context) -> z3_ast_vector;
    val Z3_mk_ast_vector_ptr = DynLink.dlsym(hndl, "Z3_mk_ast_vector")
  in
    dyn_Z3_mk_ast_vector Z3_mk_ast_vector_ptr (c)
  end

  fun Z3_mk_array_sort (c,domain,range) = 
  let
    val dyn_Z3_mk_array_sort = _import * : DynLink.fptr -> (z3_context * z3_sort * z3_sort) -> z3_sort;
    val Z3_mk_array_sort_ptr = DynLink.dlsym(hndl, "Z3_mk_array_sort")
  in
    dyn_Z3_mk_array_sort Z3_mk_array_sort_ptr (c,domain,range)
  end

  fun Z3_mk_bvsub (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvsub = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvsub_ptr = DynLink.dlsym(hndl, "Z3_mk_bvsub")
  in
    dyn_Z3_mk_bvsub Z3_mk_bvsub_ptr (c,t1,t2)
  end

  fun Z3_set_new_assignment_callback (t,f) = 
  let
    val dyn_Z3_set_new_assignment_callback = _import * : DynLink.fptr -> (z3_theory * MLton.Pointer.t) -> unit;
    val Z3_set_new_assignment_callback_ptr = DynLink.dlsym(hndl, "Z3_set_new_assignment_callback")
  in
    dyn_Z3_set_new_assignment_callback Z3_set_new_assignment_callback_ptr (t,f)
  end

  fun Z3_func_entry_get_value (c,e) = 
  let
    val dyn_Z3_func_entry_get_value = _import * : DynLink.fptr -> (z3_context * z3_func_entry) -> z3_ast;
    val Z3_func_entry_get_value_ptr = DynLink.dlsym(hndl, "Z3_func_entry_get_value")
  in
    dyn_Z3_func_entry_get_value Z3_func_entry_get_value_ptr (c,e)
  end

  fun Z3_goal_depth (c,g) = 
  let
    val dyn_Z3_goal_depth = _import * : DynLink.fptr -> (z3_context * z3_goal) -> int;
    val Z3_goal_depth_ptr = DynLink.dlsym(hndl, "Z3_goal_depth")
  in
    dyn_Z3_goal_depth Z3_goal_depth_ptr (c,g)
  end

  fun Z3_mk_store (c,a,i,v) = 
  let
    val dyn_Z3_mk_store = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_store_ptr = DynLink.dlsym(hndl, "Z3_mk_store")
  in
    dyn_Z3_mk_store Z3_mk_store_ptr (c,a,i,v)
  end

  fun Z3_get_datatype_sort_constructor (c,t,idx) = 
  let
    val dyn_Z3_get_datatype_sort_constructor = _import * : DynLink.fptr -> (z3_context * z3_sort * int) -> z3_func_decl;
    val Z3_get_datatype_sort_constructor_ptr = DynLink.dlsym(hndl, "Z3_get_datatype_sort_constructor")
  in
    dyn_Z3_get_datatype_sort_constructor Z3_get_datatype_sort_constructor_ptr (c,t,idx)
  end

  fun Z3_get_model_func_else (c,m,i) = 
  let
    val dyn_Z3_get_model_func_else = _import * : DynLink.fptr -> (z3_context * z3_model * int) -> z3_ast;
    val Z3_get_model_func_else_ptr = DynLink.dlsym(hndl, "Z3_get_model_func_else")
  in
    dyn_Z3_get_model_func_else Z3_get_model_func_else_ptr (c,m,i)
  end

  fun Z3_tactic_cond (c,p,t1,t2) = 
  let
    val dyn_Z3_tactic_cond = _import * : DynLink.fptr -> (z3_context * z3_probe * z3_tactic * z3_tactic) -> z3_tactic;
    val Z3_tactic_cond_ptr = DynLink.dlsym(hndl, "Z3_tactic_cond")
  in
    dyn_Z3_tactic_cond Z3_tactic_cond_ptr (c,p,t1,t2)
  end

  fun Z3_mk_set_sort (c,ty) = 
  let
    val dyn_Z3_mk_set_sort = _import * : DynLink.fptr -> (z3_context * z3_sort) -> z3_sort;
    val Z3_mk_set_sort_ptr = DynLink.dlsym(hndl, "Z3_mk_set_sort")
  in
    dyn_Z3_mk_set_sort Z3_mk_set_sort_ptr (c,ty)
  end

  fun Z3_mk_bvshl (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvshl = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvshl_ptr = DynLink.dlsym(hndl, "Z3_mk_bvshl")
  in
    dyn_Z3_mk_bvshl Z3_mk_bvshl_ptr (c,t1,t2)
  end

  fun Z3_mk_quantifier_const_ex (c,is_forall,weight,quantifier_id,skolem_id,num_bound,bound,num_patterns,patterns,num_no_patterns,no_patterns,body) = 
  let
    val dyn_Z3_mk_quantifier_const_ex = _import * : DynLink.fptr -> (z3_context * z3_bool * int * z3_symbol * z3_symbol * int * MLton.Pointer.t * int * MLton.Pointer.t * int * MLton.Pointer.t * z3_ast) -> z3_ast;
    val Z3_mk_quantifier_const_ex_ptr = DynLink.dlsym(hndl, "Z3_mk_quantifier_const_ex")
  in
    dyn_Z3_mk_quantifier_const_ex Z3_mk_quantifier_const_ex_ptr (c,is_forall,weight,quantifier_id,skolem_id,num_bound,bound,num_patterns,patterns,num_no_patterns,no_patterns,body)
  end

  fun Z3_set_new_diseq_callback (t,f) = 
  let
    val dyn_Z3_set_new_diseq_callback = _import * : DynLink.fptr -> (z3_theory * MLton.Pointer.t) -> unit;
    val Z3_set_new_diseq_callback_ptr = DynLink.dlsym(hndl, "Z3_set_new_diseq_callback")
  in
    dyn_Z3_set_new_diseq_callback Z3_set_new_diseq_callback_ptr (t,f)
  end

  fun Z3_global_param_set (param_id,param_value) = 
  let
    val dyn_Z3_global_param_set = _import * : DynLink.fptr -> (z3_string * z3_string) -> unit;
    val Z3_global_param_set_ptr = DynLink.dlsym(hndl, "Z3_global_param_set")
  in
    dyn_Z3_global_param_set Z3_global_param_set_ptr (param_id,param_value)
  end

  fun Z3_get_num_tactics (c) = 
  let
    val dyn_Z3_get_num_tactics = _import * : DynLink.fptr -> (z3_context) -> int;
    val Z3_get_num_tactics_ptr = DynLink.dlsym(hndl, "Z3_get_num_tactics")
  in
    dyn_Z3_get_num_tactics Z3_get_num_tactics_ptr (c)
  end

  fun Z3_mk_tuple_sort (c,mk_tuple_name,num_fields,field_names,field_sorts,mk_tuple_decl,proj_decl) = 
  let
    val dyn_Z3_mk_tuple_sort = _import * : DynLink.fptr -> (z3_context * z3_symbol * int * MLton.Pointer.t * MLton.Pointer.t * MLton.Pointer.t * MLton.Pointer.t) -> z3_sort;
    val Z3_mk_tuple_sort_ptr = DynLink.dlsym(hndl, "Z3_mk_tuple_sort")
  in
    dyn_Z3_mk_tuple_sort Z3_mk_tuple_sort_ptr (c,mk_tuple_name,num_fields,field_names,field_sorts,mk_tuple_decl,proj_decl)
  end

  fun Z3_theory_assume_eq (t,lhs,rhs) = 
  let
    val dyn_Z3_theory_assume_eq = _import * : DynLink.fptr -> (z3_theory * z3_ast * z3_ast) -> unit;
    val Z3_theory_assume_eq_ptr = DynLink.dlsym(hndl, "Z3_theory_assume_eq")
  in
    dyn_Z3_theory_assume_eq Z3_theory_assume_eq_ptr (t,lhs,rhs)
  end

  fun Z3_mk_const (c,s,ty) = 
  let
    val dyn_Z3_mk_const = _import * : DynLink.fptr -> (z3_context * z3_symbol * z3_sort) -> z3_ast;
    val Z3_mk_const_ptr = DynLink.dlsym(hndl, "Z3_mk_const")
  in
    dyn_Z3_mk_const Z3_mk_const_ptr (c,s,ty)
  end

  fun Z3_func_entry_get_arg (c,e,i) = 
  let
    val dyn_Z3_func_entry_get_arg = _import * : DynLink.fptr -> (z3_context * z3_func_entry * int) -> z3_ast;
    val Z3_func_entry_get_arg_ptr = DynLink.dlsym(hndl, "Z3_func_entry_get_arg")
  in
    dyn_Z3_func_entry_get_arg Z3_func_entry_get_arg_ptr (c,e,i)
  end

  fun Z3_mk_fresh_func_decl (c,prefix,domain_size,domain,range) = 
  let
    val dyn_Z3_mk_fresh_func_decl = _import * : DynLink.fptr -> (z3_context * z3_string * int * MLton.Pointer.t * z3_sort) -> z3_func_decl;
    val Z3_mk_fresh_func_decl_ptr = DynLink.dlsym(hndl, "Z3_mk_fresh_func_decl")
  in
    dyn_Z3_mk_fresh_func_decl Z3_mk_fresh_func_decl_ptr (c,prefix,domain_size,domain,range)
  end

  fun Z3_block_literals (c,lbls) = 
  let
    val dyn_Z3_block_literals = _import * : DynLink.fptr -> (z3_context * z3_literals) -> unit;
    val Z3_block_literals_ptr = DynLink.dlsym(hndl, "Z3_block_literals")
  in
    dyn_Z3_block_literals Z3_block_literals_ptr (c,lbls)
  end

  fun Z3_mk_select (c,a,i) = 
  let
    val dyn_Z3_mk_select = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_select_ptr = DynLink.dlsym(hndl, "Z3_mk_select")
  in
    dyn_Z3_mk_select Z3_mk_select_ptr (c,a,i)
  end

  fun Z3_mk_bvsub_no_overflow (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvsub_no_overflow = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvsub_no_overflow_ptr = DynLink.dlsym(hndl, "Z3_mk_bvsub_no_overflow")
  in
    dyn_Z3_mk_bvsub_no_overflow Z3_mk_bvsub_no_overflow_ptr (c,t1,t2)
  end

  fun Z3_goal_is_decided_unsat (c,g) = 
  let
    val dyn_Z3_goal_is_decided_unsat = _import * : DynLink.fptr -> (z3_context * z3_goal) -> z3_bool;
    val Z3_goal_is_decided_unsat_ptr = DynLink.dlsym(hndl, "Z3_goal_is_decided_unsat")
  in
    dyn_Z3_goal_is_decided_unsat Z3_goal_is_decided_unsat_ptr (c,g)
  end

  fun Z3_set_logic (c,logic) = 
  let
    val dyn_Z3_set_logic = _import * : DynLink.fptr -> (z3_context * z3_string) -> z3_bool;
    val Z3_set_logic_ptr = DynLink.dlsym(hndl, "Z3_set_logic")
  in
    dyn_Z3_set_logic Z3_set_logic_ptr (c,logic)
  end

  fun Z3_solver_to_string (c,s) = 
  let
    val dyn_Z3_solver_to_string = _import * : DynLink.fptr -> (z3_context * z3_solver) -> z3_string;
    val Z3_solver_to_string_ptr = DynLink.dlsym(hndl, "Z3_solver_to_string")
  in
    dyn_Z3_solver_to_string Z3_solver_to_string_ptr (c,s)
  end

  fun Z3_is_eq_ast (c,t1,t2) = 
  let
    val dyn_Z3_is_eq_ast = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_bool;
    val Z3_is_eq_ast_ptr = DynLink.dlsym(hndl, "Z3_is_eq_ast")
  in
    dyn_Z3_is_eq_ast Z3_is_eq_ast_ptr (c,t1,t2)
  end

  fun Z3_mk_ite (c,t1,t2,t3) = 
  let
    val dyn_Z3_mk_ite = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_ite_ptr = DynLink.dlsym(hndl, "Z3_mk_ite")
  in
    dyn_Z3_mk_ite Z3_mk_ite_ptr (c,t1,t2,t3)
  end

  fun Z3_mk_true (c) = 
  let
    val dyn_Z3_mk_true = _import * : DynLink.fptr -> (z3_context) -> z3_ast;
    val Z3_mk_true_ptr = DynLink.dlsym(hndl, "Z3_mk_true")
  in
    dyn_Z3_mk_true Z3_mk_true_ptr (c)
  end

  fun Z3_get_bool_value (c,a) = 
  let
    val dyn_Z3_get_bool_value = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_lbool;
    val Z3_get_bool_value_ptr = DynLink.dlsym(hndl, "Z3_get_bool_value")
  in
    dyn_Z3_get_bool_value Z3_get_bool_value_ptr (c,a)
  end

  fun Z3_fixedpoint_get_cover_delta (c,d,level,pred) = 
  let
    val dyn_Z3_fixedpoint_get_cover_delta = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint * int * z3_func_decl) -> z3_ast;
    val Z3_fixedpoint_get_cover_delta_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_get_cover_delta")
  in
    dyn_Z3_fixedpoint_get_cover_delta Z3_fixedpoint_get_cover_delta_ptr (c,d,level,pred)
  end

  fun Z3_get_guessed_literals (c) = 
  let
    val dyn_Z3_get_guessed_literals = _import * : DynLink.fptr -> (z3_context) -> z3_literals;
    val Z3_get_guessed_literals_ptr = DynLink.dlsym(hndl, "Z3_get_guessed_literals")
  in
    dyn_Z3_get_guessed_literals Z3_get_guessed_literals_ptr (c)
  end

  fun Z3_mk_datatypes (c,num_sorts,sort_names,sorts,constructor_lists) = 
  let
    val dyn_Z3_mk_datatypes = _import * : DynLink.fptr -> (z3_context * int * MLton.Pointer.t * MLton.Pointer.t * MLton.Pointer.t) -> unit;
    val Z3_mk_datatypes_ptr = DynLink.dlsym(hndl, "Z3_mk_datatypes")
  in
    dyn_Z3_mk_datatypes Z3_mk_datatypes_ptr (c,num_sorts,sort_names,sorts,constructor_lists)
  end

  fun Z3_sort_to_ast (c,s) = 
  let
    val dyn_Z3_sort_to_ast = _import * : DynLink.fptr -> (z3_context * z3_sort) -> z3_ast;
    val Z3_sort_to_ast_ptr = DynLink.dlsym(hndl, "Z3_sort_to_ast")
  in
    dyn_Z3_sort_to_ast Z3_sort_to_ast_ptr (c,s)
  end

  fun Z3_mk_pattern (c,num_patterns,terms) = 
  let
    val dyn_Z3_mk_pattern = _import * : DynLink.fptr -> (z3_context * int * MLton.Pointer.t) -> z3_pattern;
    val Z3_mk_pattern_ptr = DynLink.dlsym(hndl, "Z3_mk_pattern")
  in
    dyn_Z3_mk_pattern Z3_mk_pattern_ptr (c,num_patterns,terms)
  end

  fun Z3_mk_bvmul (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvmul = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvmul_ptr = DynLink.dlsym(hndl, "Z3_mk_bvmul")
  in
    dyn_Z3_mk_bvmul Z3_mk_bvmul_ptr (c,t1,t2)
  end

  fun Z3_mk_datatype (c,name,num_constructors,constructors) = 
  let
    val dyn_Z3_mk_datatype = _import * : DynLink.fptr -> (z3_context * z3_symbol * int * MLton.Pointer.t) -> z3_sort;
    val Z3_mk_datatype_ptr = DynLink.dlsym(hndl, "Z3_mk_datatype")
  in
    dyn_Z3_mk_datatype Z3_mk_datatype_ptr (c,name,num_constructors,constructors)
  end

  fun Z3_mk_unary_minus (c,arg) = 
  let
    val dyn_Z3_mk_unary_minus = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_ast;
    val Z3_mk_unary_minus_ptr = DynLink.dlsym(hndl, "Z3_mk_unary_minus")
  in
    dyn_Z3_mk_unary_minus Z3_mk_unary_minus_ptr (c,arg)
  end

  fun Z3_eval_decl (c,m,d,num_args,args,v) = 
  let
    val dyn_Z3_eval_decl = _import * : DynLink.fptr -> (z3_context * z3_model * z3_func_decl * int * MLton.Pointer.t * MLton.Pointer.t) -> z3_bool;
    val Z3_eval_decl_ptr = DynLink.dlsym(hndl, "Z3_eval_decl")
  in
    dyn_Z3_eval_decl Z3_eval_decl_ptr (c,m,d,num_args,args,v)
  end

  fun Z3_get_smtlib_num_sorts (c) = 
  let
    val dyn_Z3_get_smtlib_num_sorts = _import * : DynLink.fptr -> (z3_context) -> int;
    val Z3_get_smtlib_num_sorts_ptr = DynLink.dlsym(hndl, "Z3_get_smtlib_num_sorts")
  in
    dyn_Z3_get_smtlib_num_sorts Z3_get_smtlib_num_sorts_ptr (c)
  end

  fun Z3_tactic_using_params (c,t,p) = 
  let
    val dyn_Z3_tactic_using_params = _import * : DynLink.fptr -> (z3_context * z3_tactic * z3_params) -> z3_tactic;
    val Z3_tactic_using_params_ptr = DynLink.dlsym(hndl, "Z3_tactic_using_params")
  in
    dyn_Z3_tactic_using_params Z3_tactic_using_params_ptr (c,t,p)
  end

  fun Z3_mk_int_symbol (c,i) = 
  let
    val dyn_Z3_mk_int_symbol = _import * : DynLink.fptr -> (z3_context * int) -> z3_symbol;
    val Z3_mk_int_symbol_ptr = DynLink.dlsym(hndl, "Z3_mk_int_symbol")
  in
    dyn_Z3_mk_int_symbol Z3_mk_int_symbol_ptr (c,i)
  end

  fun Z3_get_num_probes (c) = 
  let
    val dyn_Z3_get_num_probes = _import * : DynLink.fptr -> (z3_context) -> int;
    val Z3_get_num_probes_ptr = DynLink.dlsym(hndl, "Z3_get_num_probes")
  in
    dyn_Z3_get_num_probes Z3_get_num_probes_ptr (c)
  end

  fun Z3_context_to_string (c) = 
  let
    val dyn_Z3_context_to_string = _import * : DynLink.fptr -> (z3_context) -> z3_string;
    val Z3_context_to_string_ptr = DynLink.dlsym(hndl, "Z3_context_to_string")
  in
    dyn_Z3_context_to_string Z3_context_to_string_ptr (c)
  end

  fun Z3_get_ast_hash (c,a) = 
  let
    val dyn_Z3_get_ast_hash = _import * : DynLink.fptr -> (z3_context * z3_ast) -> int;
    val Z3_get_ast_hash_ptr = DynLink.dlsym(hndl, "Z3_get_ast_hash")
  in
    dyn_Z3_get_ast_hash Z3_get_ast_hash_ptr (c,a)
  end

  fun Z3_theory_get_elem (t,i) = 
  let
    val dyn_Z3_theory_get_elem = _import * : DynLink.fptr -> (z3_theory * int) -> z3_ast;
    val Z3_theory_get_elem_ptr = DynLink.dlsym(hndl, "Z3_theory_get_elem")
  in
    dyn_Z3_theory_get_elem Z3_theory_get_elem_ptr (t,i)
  end

  fun Z3_get_numeral_uint (c,v,u) = 
  let
    val dyn_Z3_get_numeral_uint = _import * : DynLink.fptr -> (z3_context * z3_ast * MLton.Pointer.t) -> z3_bool;
    val Z3_get_numeral_uint_ptr = DynLink.dlsym(hndl, "Z3_get_numeral_uint")
  in
    dyn_Z3_get_numeral_uint Z3_get_numeral_uint_ptr (c,v,u)
  end

  fun Z3_get_app_arg (c,a,i) = 
  let
    val dyn_Z3_get_app_arg = _import * : DynLink.fptr -> (z3_context * z3_app * int) -> z3_ast;
    val Z3_get_app_arg_ptr = DynLink.dlsym(hndl, "Z3_get_app_arg")
  in
    dyn_Z3_get_app_arg Z3_get_app_arg_ptr (c,a,i)
  end

  fun Z3_fixedpoint_get_num_levels (c,d,pred) = 
  let
    val dyn_Z3_fixedpoint_get_num_levels = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint * z3_func_decl) -> int;
    val Z3_fixedpoint_get_num_levels_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_get_num_levels")
  in
    dyn_Z3_fixedpoint_get_num_levels Z3_fixedpoint_get_num_levels_ptr (c,d,pred)
  end

  fun Z3_mk_eq (c,l,r) = 
  let
    val dyn_Z3_mk_eq = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_eq_ptr = DynLink.dlsym(hndl, "Z3_mk_eq")
  in
    dyn_Z3_mk_eq Z3_mk_eq_ptr (c,l,r)
  end

  fun Z3_mk_config () = 
  let
    val dyn_Z3_mk_config = _import * : DynLink.fptr -> unit -> z3_config;
    val Z3_mk_config_ptr = DynLink.dlsym(hndl, "Z3_mk_config")
  in
    dyn_Z3_mk_config Z3_mk_config_ptr ()
  end

  fun Z3_assert_cnstr (c,a) = 
  let
    val dyn_Z3_assert_cnstr = _import * : DynLink.fptr -> (z3_context * z3_ast) -> unit;
    val Z3_assert_cnstr_ptr = DynLink.dlsym(hndl, "Z3_assert_cnstr")
  in
    dyn_Z3_assert_cnstr Z3_assert_cnstr_ptr (c,a)
  end

  fun Z3_get_smtlib_decl (c,i) = 
  let
    val dyn_Z3_get_smtlib_decl = _import * : DynLink.fptr -> (z3_context * int) -> z3_func_decl;
    val Z3_get_smtlib_decl_ptr = DynLink.dlsym(hndl, "Z3_get_smtlib_decl")
  in
    dyn_Z3_get_smtlib_decl Z3_get_smtlib_decl_ptr (c,i)
  end

  fun Z3_mk_bvneg (c,t1) = 
  let
    val dyn_Z3_mk_bvneg = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_ast;
    val Z3_mk_bvneg_ptr = DynLink.dlsym(hndl, "Z3_mk_bvneg")
  in
    dyn_Z3_mk_bvneg Z3_mk_bvneg_ptr (c,t1)
  end

  fun Z3_sort_to_string (c,s) = 
  let
    val dyn_Z3_sort_to_string = _import * : DynLink.fptr -> (z3_context * z3_sort) -> z3_string;
    val Z3_sort_to_string_ptr = DynLink.dlsym(hndl, "Z3_sort_to_string")
  in
    dyn_Z3_sort_to_string Z3_sort_to_string_ptr (c,s)
  end

  fun Z3_get_decl_int_parameter (c,d,idx) = 
  let
    val dyn_Z3_get_decl_int_parameter = _import * : DynLink.fptr -> (z3_context * z3_func_decl * int) -> int;
    val Z3_get_decl_int_parameter_ptr = DynLink.dlsym(hndl, "Z3_get_decl_int_parameter")
  in
    dyn_Z3_get_decl_int_parameter Z3_get_decl_int_parameter_ptr (c,d,idx)
  end

  fun Z3_mk_probe (c,name) = 
  let
    val dyn_Z3_mk_probe = _import * : DynLink.fptr -> (z3_context * z3_string) -> z3_probe;
    val Z3_mk_probe_ptr = DynLink.dlsym(hndl, "Z3_mk_probe")
  in
    dyn_Z3_mk_probe Z3_mk_probe_ptr (c,name)
  end

  fun Z3_del_constructor_list (c,clist) = 
  let
    val dyn_Z3_del_constructor_list = _import * : DynLink.fptr -> (z3_context * z3_constructor_list) -> unit;
    val Z3_del_constructor_list_ptr = DynLink.dlsym(hndl, "Z3_del_constructor_list")
  in
    dyn_Z3_del_constructor_list Z3_del_constructor_list_ptr (c,clist)
  end

  fun Z3_model_get_const_interp (c,m,a) = 
  let
    val dyn_Z3_model_get_const_interp = _import * : DynLink.fptr -> (z3_context * z3_model * z3_func_decl) -> z3_ast;
    val Z3_model_get_const_interp_ptr = DynLink.dlsym(hndl, "Z3_model_get_const_interp")
  in
    dyn_Z3_model_get_const_interp Z3_model_get_const_interp_ptr (c,m,a)
  end

  fun Z3_solver_get_model (c,s) = 
  let
    val dyn_Z3_solver_get_model = _import * : DynLink.fptr -> (z3_context * z3_solver) -> z3_model;
    val Z3_solver_get_model_ptr = DynLink.dlsym(hndl, "Z3_solver_get_model")
  in
    dyn_Z3_solver_get_model Z3_solver_get_model_ptr (c,s)
  end

  fun Z3_theory_assert_axiom (t,ax) = 
  let
    val dyn_Z3_theory_assert_axiom = _import * : DynLink.fptr -> (z3_theory * z3_ast) -> unit;
    val Z3_theory_assert_axiom_ptr = DynLink.dlsym(hndl, "Z3_theory_assert_axiom")
  in
    dyn_Z3_theory_assert_axiom Z3_theory_assert_axiom_ptr (t,ax)
  end

  fun Z3_get_numerator (c,a) = 
  let
    val dyn_Z3_get_numerator = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_ast;
    val Z3_get_numerator_ptr = DynLink.dlsym(hndl, "Z3_get_numerator")
  in
    dyn_Z3_get_numerator Z3_get_numerator_ptr (c,a)
  end

  fun Z3_mk_set_complement (c,arg) = 
  let
    val dyn_Z3_mk_set_complement = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_ast;
    val Z3_mk_set_complement_ptr = DynLink.dlsym(hndl, "Z3_mk_set_complement")
  in
    dyn_Z3_mk_set_complement Z3_mk_set_complement_ptr (c,arg)
  end

  fun Z3_fixedpoint_inc_ref (c,d) = 
  let
    val dyn_Z3_fixedpoint_inc_ref = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint) -> unit;
    val Z3_fixedpoint_inc_ref_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_inc_ref")
  in
    dyn_Z3_fixedpoint_inc_ref Z3_fixedpoint_inc_ref_ptr (c,d)
  end

  fun Z3_get_numeral_small (c,a,num,den) = 
  let
    val dyn_Z3_get_numeral_small = _import * : DynLink.fptr -> (z3_context * z3_ast * MLton.Pointer.t * MLton.Pointer.t) -> z3_bool;
    val Z3_get_numeral_small_ptr = DynLink.dlsym(hndl, "Z3_get_numeral_small")
  in
    dyn_Z3_get_numeral_small Z3_get_numeral_small_ptr (c,a,num,den)
  end

  fun Z3_model_get_sort_universe (c,m,s) = 
  let
    val dyn_Z3_model_get_sort_universe = _import * : DynLink.fptr -> (z3_context * z3_model * z3_sort) -> z3_ast_vector;
    val Z3_model_get_sort_universe_ptr = DynLink.dlsym(hndl, "Z3_model_get_sort_universe")
  in
    dyn_Z3_model_get_sort_universe Z3_model_get_sort_universe_ptr (c,m,s)
  end

  fun Z3_get_decl_parameter_kind (c,d,idx) = 
  let
    val dyn_Z3_get_decl_parameter_kind = _import * : DynLink.fptr -> (z3_context * z3_func_decl * int) -> z3_parameter_kind;
    val Z3_get_decl_parameter_kind_ptr = DynLink.dlsym(hndl, "Z3_get_decl_parameter_kind")
  in
    dyn_Z3_get_decl_parameter_kind Z3_get_decl_parameter_kind_ptr (c,d,idx)
  end

  fun Z3_fixedpoint_get_answer (c,d) = 
  let
    val dyn_Z3_fixedpoint_get_answer = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint) -> z3_ast;
    val Z3_fixedpoint_get_answer_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_get_answer")
  in
    dyn_Z3_fixedpoint_get_answer Z3_fixedpoint_get_answer_ptr (c,d)
  end

  fun Z3_params_set_uint (c,p,k,v) = 
  let
    val dyn_Z3_params_set_uint = _import * : DynLink.fptr -> (z3_context * z3_params * z3_symbol * int) -> unit;
    val Z3_params_set_uint_ptr = DynLink.dlsym(hndl, "Z3_params_set_uint")
  in
    dyn_Z3_params_set_uint Z3_params_set_uint_ptr (c,p,k,v)
  end

  fun Z3_probe_lt (x,p1,p2) = 
  let
    val dyn_Z3_probe_lt = _import * : DynLink.fptr -> (z3_context * z3_probe * z3_probe) -> z3_probe;
    val Z3_probe_lt_ptr = DynLink.dlsym(hndl, "Z3_probe_lt")
  in
    dyn_Z3_probe_lt Z3_probe_lt_ptr (x,p1,p2)
  end

  fun Z3_tactic_inc_ref (c,t) = 
  let
    val dyn_Z3_tactic_inc_ref = _import * : DynLink.fptr -> (z3_context * z3_tactic) -> unit;
    val Z3_tactic_inc_ref_ptr = DynLink.dlsym(hndl, "Z3_tactic_inc_ref")
  in
    dyn_Z3_tactic_inc_ref Z3_tactic_inc_ref_ptr (c,t)
  end

  fun Z3_theory_get_num_apps (t) = 
  let
    val dyn_Z3_theory_get_num_apps = _import * : DynLink.fptr -> (z3_theory) -> int;
    val Z3_theory_get_num_apps_ptr = DynLink.dlsym(hndl, "Z3_theory_get_num_apps")
  in
    dyn_Z3_theory_get_num_apps Z3_theory_get_num_apps_ptr (t)
  end

  fun Z3_get_smtlib_sort (c,i) = 
  let
    val dyn_Z3_get_smtlib_sort = _import * : DynLink.fptr -> (z3_context * int) -> z3_sort;
    val Z3_get_smtlib_sort_ptr = DynLink.dlsym(hndl, "Z3_get_smtlib_sort")
  in
    dyn_Z3_get_smtlib_sort Z3_get_smtlib_sort_ptr (c,i)
  end

  fun Z3_dec_ref (c,a) = 
  let
    val dyn_Z3_dec_ref = _import * : DynLink.fptr -> (z3_context * z3_ast) -> unit;
    val Z3_dec_ref_ptr = DynLink.dlsym(hndl, "Z3_dec_ref")
  in
    dyn_Z3_dec_ref Z3_dec_ref_ptr (c,a)
  end

  fun Z3_get_bv_sort_size (c,t) = 
  let
    val dyn_Z3_get_bv_sort_size = _import * : DynLink.fptr -> (z3_context * z3_sort) -> int;
    val Z3_get_bv_sort_size_ptr = DynLink.dlsym(hndl, "Z3_get_bv_sort_size")
  in
    dyn_Z3_get_bv_sort_size Z3_get_bv_sort_size_ptr (c,t)
  end

  fun Z3_theory_mk_constant (c,t,n,s) = 
  let
    val dyn_Z3_theory_mk_constant = _import * : DynLink.fptr -> (z3_context * z3_theory * z3_symbol * z3_sort) -> z3_ast;
    val Z3_theory_mk_constant_ptr = DynLink.dlsym(hndl, "Z3_theory_mk_constant")
  in
    dyn_Z3_theory_mk_constant Z3_theory_mk_constant_ptr (c,t,n,s)
  end

  fun Z3_ast_vector_set (c,v,i,a) = 
  let
    val dyn_Z3_ast_vector_set = _import * : DynLink.fptr -> (z3_context * z3_ast_vector * int * z3_ast) -> unit;
    val Z3_ast_vector_set_ptr = DynLink.dlsym(hndl, "Z3_ast_vector_set")
  in
    dyn_Z3_ast_vector_set Z3_ast_vector_set_ptr (c,v,i,a)
  end

  fun Z3_tactic_and_then (c,t1,t2) = 
  let
    val dyn_Z3_tactic_and_then = _import * : DynLink.fptr -> (z3_context * z3_tactic * z3_tactic) -> z3_tactic;
    val Z3_tactic_and_then_ptr = DynLink.dlsym(hndl, "Z3_tactic_and_then")
  in
    dyn_Z3_tactic_and_then Z3_tactic_and_then_ptr (c,t1,t2)
  end

  fun Z3_mk_bvxor (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvxor = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvxor_ptr = DynLink.dlsym(hndl, "Z3_mk_bvxor")
  in
    dyn_Z3_mk_bvxor Z3_mk_bvxor_ptr (c,t1,t2)
  end

  fun Z3_mk_iff (c,t1,t2) = 
  let
    val dyn_Z3_mk_iff = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_iff_ptr = DynLink.dlsym(hndl, "Z3_mk_iff")
  in
    dyn_Z3_mk_iff Z3_mk_iff_ptr (c,t1,t2)
  end

  fun Z3_get_arity (c,d) = 
  let
    val dyn_Z3_get_arity = _import * : DynLink.fptr -> (z3_context * z3_func_decl) -> int;
    val Z3_get_arity_ptr = DynLink.dlsym(hndl, "Z3_get_arity")
  in
    dyn_Z3_get_arity Z3_get_arity_ptr (c,d)
  end

  fun Z3_mk_int2bv (c,n,t1) = 
  let
    val dyn_Z3_mk_int2bv = _import * : DynLink.fptr -> (z3_context * int * z3_ast) -> z3_ast;
    val Z3_mk_int2bv_ptr = DynLink.dlsym(hndl, "Z3_mk_int2bv")
  in
    dyn_Z3_mk_int2bv Z3_mk_int2bv_ptr (c,n,t1)
  end

  fun Z3_parse_smtlib2_string (c,str,num_sorts,sort_names,sorts,num_decls,decl_names,decls) = 
  let
    val dyn_Z3_parse_smtlib2_string = _import * : DynLink.fptr -> (z3_context * z3_string * int * MLton.Pointer.t * MLton.Pointer.t * int * MLton.Pointer.t * MLton.Pointer.t) -> z3_ast;
    val Z3_parse_smtlib2_string_ptr = DynLink.dlsym(hndl, "Z3_parse_smtlib2_string")
  in
    dyn_Z3_parse_smtlib2_string Z3_parse_smtlib2_string_ptr (c,str,num_sorts,sort_names,sorts,num_decls,decl_names,decls)
  end

  fun Z3_mk_false (c) = 
  let
    val dyn_Z3_mk_false = _import * : DynLink.fptr -> (z3_context) -> z3_ast;
    val Z3_mk_false_ptr = DynLink.dlsym(hndl, "Z3_mk_false")
  in
    dyn_Z3_mk_false Z3_mk_false_ptr (c)
  end

  fun Z3_fixedpoint_push (c,d) = 
  let
    val dyn_Z3_fixedpoint_push = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint) -> unit;
    val Z3_fixedpoint_push_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_push")
  in
    dyn_Z3_fixedpoint_push Z3_fixedpoint_push_ptr (c,d)
  end

  fun Z3_mk_real (c,num,den) = 
  let
    val dyn_Z3_mk_real = _import * : DynLink.fptr -> (z3_context * int * int) -> z3_ast;
    val Z3_mk_real_ptr = DynLink.dlsym(hndl, "Z3_mk_real")
  in
    dyn_Z3_mk_real Z3_mk_real_ptr (c,num,den)
  end

  fun Z3_params_set_bool (c,p,k,v) = 
  let
    val dyn_Z3_params_set_bool = _import * : DynLink.fptr -> (z3_context * z3_params * z3_symbol * z3_bool) -> unit;
    val Z3_params_set_bool_ptr = DynLink.dlsym(hndl, "Z3_params_set_bool")
  in
    dyn_Z3_params_set_bool Z3_params_set_bool_ptr (c,p,k,v)
  end

  fun Z3_tactic_skip (c) = 
  let
    val dyn_Z3_tactic_skip = _import * : DynLink.fptr -> (z3_context) -> z3_tactic;
    val Z3_tactic_skip_ptr = DynLink.dlsym(hndl, "Z3_tactic_skip")
  in
    dyn_Z3_tactic_skip Z3_tactic_skip_ptr (c)
  end

  fun Z3_get_model_constant (c,m,i) = 
  let
    val dyn_Z3_get_model_constant = _import * : DynLink.fptr -> (z3_context * z3_model * int) -> z3_func_decl;
    val Z3_get_model_constant_ptr = DynLink.dlsym(hndl, "Z3_get_model_constant")
  in
    dyn_Z3_get_model_constant Z3_get_model_constant_ptr (c,m,i)
  end

  fun Z3_param_descrs_get_kind (c,p,n) = 
  let
    val dyn_Z3_param_descrs_get_kind = _import * : DynLink.fptr -> (z3_context * z3_param_descrs * z3_symbol) -> z3_param_kind;
    val Z3_param_descrs_get_kind_ptr = DynLink.dlsym(hndl, "Z3_param_descrs_get_kind")
  in
    dyn_Z3_param_descrs_get_kind Z3_param_descrs_get_kind_ptr (c,p,n)
  end

  fun Z3_get_smtlib_assumption (c,i) = 
  let
    val dyn_Z3_get_smtlib_assumption = _import * : DynLink.fptr -> (z3_context * int) -> z3_ast;
    val Z3_get_smtlib_assumption_ptr = DynLink.dlsym(hndl, "Z3_get_smtlib_assumption")
  in
    dyn_Z3_get_smtlib_assumption Z3_get_smtlib_assumption_ptr (c,i)
  end

  fun Z3_mk_unsigned_int (c,v,ty) = 
  let
    val dyn_Z3_mk_unsigned_int = _import * : DynLink.fptr -> (z3_context * int * z3_sort) -> z3_ast;
    val Z3_mk_unsigned_int_ptr = DynLink.dlsym(hndl, "Z3_mk_unsigned_int")
  in
    dyn_Z3_mk_unsigned_int Z3_mk_unsigned_int_ptr (c,v,ty)
  end

  fun Z3_mk_array_default (c,array) = 
  let
    val dyn_Z3_mk_array_default = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_ast;
    val Z3_mk_array_default_ptr = DynLink.dlsym(hndl, "Z3_mk_array_default")
  in
    dyn_Z3_mk_array_default Z3_mk_array_default_ptr (c,array)
  end

  fun Z3_theory_get_context (t) = 
  let
    val dyn_Z3_theory_get_context = _import * : DynLink.fptr -> (z3_theory) -> z3_context;
    val Z3_theory_get_context_ptr = DynLink.dlsym(hndl, "Z3_theory_get_context")
  in
    dyn_Z3_theory_get_context Z3_theory_get_context_ptr (t)
  end

  fun Z3_mk_and (c,num_args,args) = 
  let
    val dyn_Z3_mk_and = _import * : DynLink.fptr -> (z3_context * int * MLton.Pointer.t) -> z3_ast;
    val Z3_mk_and_ptr = DynLink.dlsym(hndl, "Z3_mk_and")
  in
    dyn_Z3_mk_and Z3_mk_and_ptr (c,num_args,args)
  end

  fun Z3_probe_dec_ref (c,p) = 
  let
    val dyn_Z3_probe_dec_ref = _import * : DynLink.fptr -> (z3_context * z3_probe) -> unit;
    val Z3_probe_dec_ref_ptr = DynLink.dlsym(hndl, "Z3_probe_dec_ref")
  in
    dyn_Z3_probe_dec_ref Z3_probe_dec_ref_ptr (c,p)
  end

  fun Z3_get_version (major,minor,build_number,revision_number) = 
  let
    val dyn_Z3_get_version = _import * : DynLink.fptr -> (MLton.Pointer.t * MLton.Pointer.t * MLton.Pointer.t * MLton.Pointer.t) -> unit;
    val Z3_get_version_ptr = DynLink.dlsym(hndl, "Z3_get_version")
  in
    dyn_Z3_get_version Z3_get_version_ptr (major,minor,build_number,revision_number)
  end

  fun Z3_set_ast_print_mode (c,mode) = 
  let
    val dyn_Z3_set_ast_print_mode = _import * : DynLink.fptr -> (z3_context * z3_ast_print_mode) -> unit;
    val Z3_set_ast_print_mode_ptr = DynLink.dlsym(hndl, "Z3_set_ast_print_mode")
  in
    dyn_Z3_set_ast_print_mode Z3_set_ast_print_mode_ptr (c,mode)
  end

  fun Z3_get_error_msg (err) = 
  let
    val dyn_Z3_get_error_msg = _import * : DynLink.fptr -> (z3_error_code) -> z3_string;
    val Z3_get_error_msg_ptr = DynLink.dlsym(hndl, "Z3_get_error_msg")
  in
    dyn_Z3_get_error_msg Z3_get_error_msg_ptr (err)
  end

  fun Z3_mk_implies (c,t1,t2) = 
  let
    val dyn_Z3_mk_implies = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_implies_ptr = DynLink.dlsym(hndl, "Z3_mk_implies")
  in
    dyn_Z3_mk_implies Z3_mk_implies_ptr (c,t1,t2)
  end

  fun Z3_fixedpoint_to_string (c,f,num_queries,queries) = 
  let
    val dyn_Z3_fixedpoint_to_string = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint * int * MLton.Pointer.t) -> z3_string;
    val Z3_fixedpoint_to_string_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_to_string")
  in
    dyn_Z3_fixedpoint_to_string Z3_fixedpoint_to_string_ptr (c,f,num_queries,queries)
  end

  fun Z3_get_numeral_int (c,v,i) = 
  let
    val dyn_Z3_get_numeral_int = _import * : DynLink.fptr -> (z3_context * z3_ast * MLton.Pointer.t) -> z3_bool;
    val Z3_get_numeral_int_ptr = DynLink.dlsym(hndl, "Z3_get_numeral_int")
  in
    dyn_Z3_get_numeral_int Z3_get_numeral_int_ptr (c,v,i)
  end

  fun Z3_mk_bvsmod (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvsmod = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvsmod_ptr = DynLink.dlsym(hndl, "Z3_mk_bvsmod")
  in
    dyn_Z3_mk_bvsmod Z3_mk_bvsmod_ptr (c,t1,t2)
  end

  fun Z3_mk_repeat (c,i,t1) = 
  let
    val dyn_Z3_mk_repeat = _import * : DynLink.fptr -> (z3_context * int * z3_ast) -> z3_ast;
    val Z3_mk_repeat_ptr = DynLink.dlsym(hndl, "Z3_mk_repeat")
  in
    dyn_Z3_mk_repeat Z3_mk_repeat_ptr (c,i,t1)
  end

  fun Z3_tactic_apply_ex (c,t,g,p) = 
  let
    val dyn_Z3_tactic_apply_ex = _import * : DynLink.fptr -> (z3_context * z3_tactic * z3_goal * z3_params) -> z3_apply_result;
    val Z3_tactic_apply_ex_ptr = DynLink.dlsym(hndl, "Z3_tactic_apply_ex")
  in
    dyn_Z3_tactic_apply_ex Z3_tactic_apply_ex_ptr (c,t,g,p)
  end

  fun Z3_is_as_array (c,a) = 
  let
    val dyn_Z3_is_as_array = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_bool;
    val Z3_is_as_array_ptr = DynLink.dlsym(hndl, "Z3_is_as_array")
  in
    dyn_Z3_is_as_array Z3_is_as_array_ptr (c,a)
  end

  fun Z3_stats_to_string (c,s) = 
  let
    val dyn_Z3_stats_to_string = _import * : DynLink.fptr -> (z3_context * z3_stats) -> z3_string;
    val Z3_stats_to_string_ptr = DynLink.dlsym(hndl, "Z3_stats_to_string")
  in
    dyn_Z3_stats_to_string Z3_stats_to_string_ptr (c,s)
  end

  fun Z3_fixedpoint_pop (c,d) = 
  let
    val dyn_Z3_fixedpoint_pop = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint) -> unit;
    val Z3_fixedpoint_pop_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_pop")
  in
    dyn_Z3_fixedpoint_pop Z3_fixedpoint_pop_ptr (c,d)
  end

  fun Z3_fixedpoint_query (c,d,query) = 
  let
    val dyn_Z3_fixedpoint_query = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint * z3_ast) -> z3_lbool;
    val Z3_fixedpoint_query_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_query")
  in
    dyn_Z3_fixedpoint_query Z3_fixedpoint_query_ptr (c,d,query)
  end

  fun Z3_del_context (c) = 
  let
    val dyn_Z3_del_context = _import * : DynLink.fptr -> (z3_context) -> unit;
    val Z3_del_context_ptr = DynLink.dlsym(hndl, "Z3_del_context")
  in
    dyn_Z3_del_context Z3_del_context_ptr (c)
  end

  fun Z3_mk_power (c,arg1,arg2) = 
  let
    val dyn_Z3_mk_power = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_power_ptr = DynLink.dlsym(hndl, "Z3_mk_power")
  in
    dyn_Z3_mk_power Z3_mk_power_ptr (c,arg1,arg2)
  end

  fun Z3_to_func_decl (c,a) = 
  let
    val dyn_Z3_to_func_decl = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_func_decl;
    val Z3_to_func_decl_ptr = DynLink.dlsym(hndl, "Z3_to_func_decl")
  in
    dyn_Z3_to_func_decl Z3_to_func_decl_ptr (c,a)
  end

  fun Z3_is_eq_sort (c,s1,s2) = 
  let
    val dyn_Z3_is_eq_sort = _import * : DynLink.fptr -> (z3_context * z3_sort * z3_sort) -> z3_bool;
    val Z3_is_eq_sort_ptr = DynLink.dlsym(hndl, "Z3_is_eq_sort")
  in
    dyn_Z3_is_eq_sort Z3_is_eq_sort_ptr (c,s1,s2)
  end

  fun Z3_fixedpoint_update_rule (c,d,a,name) = 
  let
    val dyn_Z3_fixedpoint_update_rule = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint * z3_ast * z3_symbol) -> unit;
    val Z3_fixedpoint_update_rule_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_update_rule")
  in
    dyn_Z3_fixedpoint_update_rule Z3_fixedpoint_update_rule_ptr (c,d,a,name)
  end

  fun Z3_solver_set_params (c,s,p) = 
  let
    val dyn_Z3_solver_set_params = _import * : DynLink.fptr -> (z3_context * z3_solver * z3_params) -> unit;
    val Z3_solver_set_params_ptr = DynLink.dlsym(hndl, "Z3_solver_set_params")
  in
    dyn_Z3_solver_set_params Z3_solver_set_params_ptr (c,s,p)
  end

  fun Z3_check_and_get_model (c,m) = 
  let
    val dyn_Z3_check_and_get_model = _import * : DynLink.fptr -> (z3_context * MLton.Pointer.t) -> z3_lbool;
    val Z3_check_and_get_model_ptr = DynLink.dlsym(hndl, "Z3_check_and_get_model")
  in
    dyn_Z3_check_and_get_model Z3_check_and_get_model_ptr (c,m)
  end

  fun Z3_parse_smtlib_file (c,file_name,num_sorts,sort_names,sorts,num_decls,decl_names,decls) = 
  let
    val dyn_Z3_parse_smtlib_file = _import * : DynLink.fptr -> (z3_context * z3_string * int * MLton.Pointer.t * MLton.Pointer.t * int * MLton.Pointer.t * MLton.Pointer.t) -> unit;
    val Z3_parse_smtlib_file_ptr = DynLink.dlsym(hndl, "Z3_parse_smtlib_file")
  in
    dyn_Z3_parse_smtlib_file Z3_parse_smtlib_file_ptr (c,file_name,num_sorts,sort_names,sorts,num_decls,decl_names,decls)
  end

  fun Z3_get_datatype_sort_recognizer (c,t,idx) = 
  let
    val dyn_Z3_get_datatype_sort_recognizer = _import * : DynLink.fptr -> (z3_context * z3_sort * int) -> z3_func_decl;
    val Z3_get_datatype_sort_recognizer_ptr = DynLink.dlsym(hndl, "Z3_get_datatype_sort_recognizer")
  in
    dyn_Z3_get_datatype_sort_recognizer Z3_get_datatype_sort_recognizer_ptr (c,t,idx)
  end

  fun Z3_mk_exists_const (c,weight,num_bound,bound,num_patterns,patterns,body) = 
  let
    val dyn_Z3_mk_exists_const = _import * : DynLink.fptr -> (z3_context * int * int * MLton.Pointer.t * int * MLton.Pointer.t * z3_ast) -> z3_ast;
    val Z3_mk_exists_const_ptr = DynLink.dlsym(hndl, "Z3_mk_exists_const")
  in
    dyn_Z3_mk_exists_const Z3_mk_exists_const_ptr (c,weight,num_bound,bound,num_patterns,patterns,body)
  end

  fun Z3_get_index_value (c,a) = 
  let
    val dyn_Z3_get_index_value = _import * : DynLink.fptr -> (z3_context * z3_ast) -> int;
    val Z3_get_index_value_ptr = DynLink.dlsym(hndl, "Z3_get_index_value")
  in
    dyn_Z3_get_index_value Z3_get_index_value_ptr (c,a)
  end

  fun Z3_mk_ge (c,t1,t2) = 
  let
    val dyn_Z3_mk_ge = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_ge_ptr = DynLink.dlsym(hndl, "Z3_mk_ge")
  in
    dyn_Z3_mk_ge Z3_mk_ge_ptr (c,t1,t2)
  end

  fun Z3_mk_bvudiv (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvudiv = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvudiv_ptr = DynLink.dlsym(hndl, "Z3_mk_bvudiv")
  in
    dyn_Z3_mk_bvudiv Z3_mk_bvudiv_ptr (c,t1,t2)
  end

  fun Z3_get_algebraic_number_upper (c,a,precision) = 
  let
    val dyn_Z3_get_algebraic_number_upper = _import * : DynLink.fptr -> (z3_context * z3_ast * int) -> z3_ast;
    val Z3_get_algebraic_number_upper_ptr = DynLink.dlsym(hndl, "Z3_get_algebraic_number_upper")
  in
    dyn_Z3_get_algebraic_number_upper Z3_get_algebraic_number_upper_ptr (c,a,precision)
  end

  fun Z3_param_descrs_dec_ref (c,p) = 
  let
    val dyn_Z3_param_descrs_dec_ref = _import * : DynLink.fptr -> (z3_context * z3_param_descrs) -> unit;
    val Z3_param_descrs_dec_ref_ptr = DynLink.dlsym(hndl, "Z3_param_descrs_dec_ref")
  in
    dyn_Z3_param_descrs_dec_ref Z3_param_descrs_dec_ref_ptr (c,p)
  end

  fun Z3_get_smtlib_formula (c,i) = 
  let
    val dyn_Z3_get_smtlib_formula = _import * : DynLink.fptr -> (z3_context * int) -> z3_ast;
    val Z3_get_smtlib_formula_ptr = DynLink.dlsym(hndl, "Z3_get_smtlib_formula")
  in
    dyn_Z3_get_smtlib_formula Z3_get_smtlib_formula_ptr (c,i)
  end

  fun Z3_mk_set_subset (c,arg1,arg2) = 
  let
    val dyn_Z3_mk_set_subset = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_set_subset_ptr = DynLink.dlsym(hndl, "Z3_mk_set_subset")
  in
    dyn_Z3_mk_set_subset Z3_mk_set_subset_ptr (c,arg1,arg2)
  end

  fun Z3_mk_bv_sort (c,sz) = 
  let
    val dyn_Z3_mk_bv_sort = _import * : DynLink.fptr -> (z3_context * int) -> z3_sort;
    val Z3_mk_bv_sort_ptr = DynLink.dlsym(hndl, "Z3_mk_bv_sort")
  in
    dyn_Z3_mk_bv_sort Z3_mk_bv_sort_ptr (c,sz)
  end

  fun Z3_param_descrs_size (c,p) = 
  let
    val dyn_Z3_param_descrs_size = _import * : DynLink.fptr -> (z3_context * z3_param_descrs) -> int;
    val Z3_param_descrs_size_ptr = DynLink.dlsym(hndl, "Z3_param_descrs_size")
  in
    dyn_Z3_param_descrs_size Z3_param_descrs_size_ptr (c,p)
  end

  fun Z3_mk_solver (c) = 
  let
    val dyn_Z3_mk_solver = _import * : DynLink.fptr -> (z3_context) -> z3_solver;
    val Z3_mk_solver_ptr = DynLink.dlsym(hndl, "Z3_mk_solver")
  in
    dyn_Z3_mk_solver Z3_mk_solver_ptr (c)
  end

  fun Z3_fixedpoint_from_file (c,f,s) = 
  let
    val dyn_Z3_fixedpoint_from_file = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint * z3_string) -> z3_ast_vector;
    val Z3_fixedpoint_from_file_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_from_file")
  in
    dyn_Z3_fixedpoint_from_file Z3_fixedpoint_from_file_ptr (c,f,s)
  end

  fun Z3_persist_ast (c,a,num_scopes) = 
  let
    val dyn_Z3_persist_ast = _import * : DynLink.fptr -> (z3_context * z3_ast * int) -> unit;
    val Z3_persist_ast_ptr = DynLink.dlsym(hndl, "Z3_persist_ast")
  in
    dyn_Z3_persist_ast Z3_persist_ast_ptr (c,a,num_scopes)
  end

  fun Z3_check_assumptions (c,num_assumptions,assumptions,m,proof,core_size,core) = 
  let
    val dyn_Z3_check_assumptions = _import * : DynLink.fptr -> (z3_context * int * MLton.Pointer.t * MLton.Pointer.t * MLton.Pointer.t * MLton.Pointer.t * MLton.Pointer.t) -> z3_lbool;
    val Z3_check_assumptions_ptr = DynLink.dlsym(hndl, "Z3_check_assumptions")
  in
    dyn_Z3_check_assumptions Z3_check_assumptions_ptr (c,num_assumptions,assumptions,m,proof,core_size,core)
  end

  fun Z3_probe_apply (c,p,g) = 
  let
    val dyn_Z3_probe_apply = _import * : DynLink.fptr -> (z3_context * z3_probe * z3_goal) -> double;
    val Z3_probe_apply_ptr = DynLink.dlsym(hndl, "Z3_probe_apply")
  in
    dyn_Z3_probe_apply Z3_probe_apply_ptr (c,p,g)
  end

  fun Z3_mk_uninterpreted_sort (c,s) = 
  let
    val dyn_Z3_mk_uninterpreted_sort = _import * : DynLink.fptr -> (z3_context * z3_symbol) -> z3_sort;
    val Z3_mk_uninterpreted_sort_ptr = DynLink.dlsym(hndl, "Z3_mk_uninterpreted_sort")
  in
    dyn_Z3_mk_uninterpreted_sort Z3_mk_uninterpreted_sort_ptr (c,s)
  end

  fun Z3_pattern_to_string (c,p) = 
  let
    val dyn_Z3_pattern_to_string = _import * : DynLink.fptr -> (z3_context * z3_pattern) -> z3_string;
    val Z3_pattern_to_string_ptr = DynLink.dlsym(hndl, "Z3_pattern_to_string")
  in
    dyn_Z3_pattern_to_string Z3_pattern_to_string_ptr (c,p)
  end

  fun Z3_mk_const_array (c,domain,v) = 
  let
    val dyn_Z3_mk_const_array = _import * : DynLink.fptr -> (z3_context * z3_sort * z3_ast) -> z3_ast;
    val Z3_mk_const_array_ptr = DynLink.dlsym(hndl, "Z3_mk_const_array")
  in
    dyn_Z3_mk_const_array Z3_mk_const_array_ptr (c,domain,v)
  end

  fun Z3_tactic_get_descr (c,name) = 
  let
    val dyn_Z3_tactic_get_descr = _import * : DynLink.fptr -> (z3_context * z3_string) -> z3_string;
    val Z3_tactic_get_descr_ptr = DynLink.dlsym(hndl, "Z3_tactic_get_descr")
  in
    dyn_Z3_tactic_get_descr Z3_tactic_get_descr_ptr (c,name)
  end

  fun Z3_goal_inc_ref (c,g) = 
  let
    val dyn_Z3_goal_inc_ref = _import * : DynLink.fptr -> (z3_context * z3_goal) -> unit;
    val Z3_goal_inc_ref_ptr = DynLink.dlsym(hndl, "Z3_goal_inc_ref")
  in
    dyn_Z3_goal_inc_ref Z3_goal_inc_ref_ptr (c,g)
  end

  fun Z3_ast_map_to_string (c,m) = 
  let
    val dyn_Z3_ast_map_to_string = _import * : DynLink.fptr -> (z3_context * z3_ast_map) -> z3_string;
    val Z3_ast_map_to_string_ptr = DynLink.dlsym(hndl, "Z3_ast_map_to_string")
  in
    dyn_Z3_ast_map_to_string Z3_ast_map_to_string_ptr (c,m)
  end

  fun Z3_stats_is_uint (c,s,idx) = 
  let
    val dyn_Z3_stats_is_uint = _import * : DynLink.fptr -> (z3_context * z3_stats * int) -> z3_bool;
    val Z3_stats_is_uint_ptr = DynLink.dlsym(hndl, "Z3_stats_is_uint")
  in
    dyn_Z3_stats_is_uint Z3_stats_is_uint_ptr (c,s,idx)
  end

  fun Z3_mk_solver_from_tactic (c,t) = 
  let
    val dyn_Z3_mk_solver_from_tactic = _import * : DynLink.fptr -> (z3_context * z3_tactic) -> z3_solver;
    val Z3_mk_solver_from_tactic_ptr = DynLink.dlsym(hndl, "Z3_mk_solver_from_tactic")
  in
    dyn_Z3_mk_solver_from_tactic Z3_mk_solver_from_tactic_ptr (c,t)
  end

  fun Z3_theory_mk_func_decl (c,t,n,domain_size,domain,range) = 
  let
    val dyn_Z3_theory_mk_func_decl = _import * : DynLink.fptr -> (z3_context * z3_theory * z3_symbol * int * MLton.Pointer.t * z3_sort) -> z3_func_decl;
    val Z3_theory_mk_func_decl_ptr = DynLink.dlsym(hndl, "Z3_theory_mk_func_decl")
  in
    dyn_Z3_theory_mk_func_decl Z3_theory_mk_func_decl_ptr (c,t,n,domain_size,domain,range)
  end

  fun Z3_toggle_warning_messages (enabled) = 
  let
    val dyn_Z3_toggle_warning_messages = _import * : DynLink.fptr -> (z3_bool) -> unit;
    val Z3_toggle_warning_messages_ptr = DynLink.dlsym(hndl, "Z3_toggle_warning_messages")
  in
    dyn_Z3_toggle_warning_messages Z3_toggle_warning_messages_ptr (enabled)
  end

  fun Z3_update_param_value (c,param_id,param_value) = 
  let
    val dyn_Z3_update_param_value = _import * : DynLink.fptr -> (z3_context * z3_string * z3_string) -> unit;
    val Z3_update_param_value_ptr = DynLink.dlsym(hndl, "Z3_update_param_value")
  in
    dyn_Z3_update_param_value Z3_update_param_value_ptr (c,param_id,param_value)
  end

  fun Z3_get_decl_name (c,d) = 
  let
    val dyn_Z3_get_decl_name = _import * : DynLink.fptr -> (z3_context * z3_func_decl) -> z3_symbol;
    val Z3_get_decl_name_ptr = DynLink.dlsym(hndl, "Z3_get_decl_name")
  in
    dyn_Z3_get_decl_name Z3_get_decl_name_ptr (c,d)
  end

  fun Z3_substitute (c,a,num_exprs,from,to) = 
  let
    val dyn_Z3_substitute = _import * : DynLink.fptr -> (z3_context * z3_ast * int * MLton.Pointer.t * MLton.Pointer.t) -> z3_ast;
    val Z3_substitute_ptr = DynLink.dlsym(hndl, "Z3_substitute")
  in
    dyn_Z3_substitute Z3_substitute_ptr (c,a,num_exprs,from,to)
  end

  fun Z3_params_validate (c,p,d) = 
  let
    val dyn_Z3_params_validate = _import * : DynLink.fptr -> (z3_context * z3_params * z3_param_descrs) -> unit;
    val Z3_params_validate_ptr = DynLink.dlsym(hndl, "Z3_params_validate")
  in
    dyn_Z3_params_validate Z3_params_validate_ptr (c,p,d)
  end

  fun Z3_get_array_sort_domain (c,t) = 
  let
    val dyn_Z3_get_array_sort_domain = _import * : DynLink.fptr -> (z3_context * z3_sort) -> z3_sort;
    val Z3_get_array_sort_domain_ptr = DynLink.dlsym(hndl, "Z3_get_array_sort_domain")
  in
    dyn_Z3_get_array_sort_domain Z3_get_array_sort_domain_ptr (c,t)
  end

  fun Z3_mk_int2real (c,t1) = 
  let
    val dyn_Z3_mk_int2real = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_ast;
    val Z3_mk_int2real_ptr = DynLink.dlsym(hndl, "Z3_mk_int2real")
  in
    dyn_Z3_mk_int2real Z3_mk_int2real_ptr (c,t1)
  end

  fun Z3_solver_assert_and_track (c,s,a,p) = 
  let
    val dyn_Z3_solver_assert_and_track = _import * : DynLink.fptr -> (z3_context * z3_solver * z3_ast * z3_ast) -> unit;
    val Z3_solver_assert_and_track_ptr = DynLink.dlsym(hndl, "Z3_solver_assert_and_track")
  in
    dyn_Z3_solver_assert_and_track Z3_solver_assert_and_track_ptr (c,s,a,p)
  end

  fun Z3_del_config (c) = 
  let
    val dyn_Z3_del_config = _import * : DynLink.fptr -> (z3_config) -> unit;
    val Z3_del_config_ptr = DynLink.dlsym(hndl, "Z3_del_config")
  in
    dyn_Z3_del_config Z3_del_config_ptr (c)
  end

  fun Z3_func_entry_inc_ref (c,e) = 
  let
    val dyn_Z3_func_entry_inc_ref = _import * : DynLink.fptr -> (z3_context * z3_func_entry) -> unit;
    val Z3_func_entry_inc_ref_ptr = DynLink.dlsym(hndl, "Z3_func_entry_inc_ref")
  in
    dyn_Z3_func_entry_inc_ref Z3_func_entry_inc_ref_ptr (c,e)
  end

  fun Z3_get_label_symbol (c,lbls,idx) = 
  let
    val dyn_Z3_get_label_symbol = _import * : DynLink.fptr -> (z3_context * z3_literals * int) -> z3_symbol;
    val Z3_get_label_symbol_ptr = DynLink.dlsym(hndl, "Z3_get_label_symbol")
  in
    dyn_Z3_get_label_symbol Z3_get_label_symbol_ptr (c,lbls,idx)
  end

  fun Z3_fixedpoint_get_help (c,f) = 
  let
    val dyn_Z3_fixedpoint_get_help = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint) -> z3_string;
    val Z3_fixedpoint_get_help_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_get_help")
  in
    dyn_Z3_fixedpoint_get_help Z3_fixedpoint_get_help_ptr (c,f)
  end

  fun Z3_set_reduce_eq_callback (t,f) = 
  let
    val dyn_Z3_set_reduce_eq_callback = _import * : DynLink.fptr -> (z3_theory * MLton.Pointer.t) -> unit;
    val Z3_set_reduce_eq_callback_ptr = DynLink.dlsym(hndl, "Z3_set_reduce_eq_callback")
  in
    dyn_Z3_set_reduce_eq_callback Z3_set_reduce_eq_callback_ptr (t,f)
  end

  fun Z3_solver_get_num_scopes (c,s) = 
  let
    val dyn_Z3_solver_get_num_scopes = _import * : DynLink.fptr -> (z3_context * z3_solver) -> int;
    val Z3_solver_get_num_scopes_ptr = DynLink.dlsym(hndl, "Z3_solver_get_num_scopes")
  in
    dyn_Z3_solver_get_num_scopes Z3_solver_get_num_scopes_ptr (c,s)
  end

  fun Z3_mk_fresh_const (c,prefix,ty) = 
  let
    val dyn_Z3_mk_fresh_const = _import * : DynLink.fptr -> (z3_context * z3_string * z3_sort) -> z3_ast;
    val Z3_mk_fresh_const_ptr = DynLink.dlsym(hndl, "Z3_mk_fresh_const")
  in
    dyn_Z3_mk_fresh_const Z3_mk_fresh_const_ptr (c,prefix,ty)
  end

  fun Z3_get_quantifier_num_bound (c,a) = 
  let
    val dyn_Z3_get_quantifier_num_bound = _import * : DynLink.fptr -> (z3_context * z3_ast) -> int;
    val Z3_get_quantifier_num_bound_ptr = DynLink.dlsym(hndl, "Z3_get_quantifier_num_bound")
  in
    dyn_Z3_get_quantifier_num_bound Z3_get_quantifier_num_bound_ptr (c,a)
  end

  fun Z3_reset_memory () = 
  let
    val dyn_Z3_reset_memory = _import * : DynLink.fptr -> () -> unit;
    val Z3_reset_memory_ptr = DynLink.dlsym(hndl, "Z3_reset_memory")
  in
    dyn_Z3_reset_memory Z3_reset_memory_ptr ()
  end

  fun Z3_get_smtlib_num_assumptions (c) = 
  let
    val dyn_Z3_get_smtlib_num_assumptions = _import * : DynLink.fptr -> (z3_context) -> int;
    val Z3_get_smtlib_num_assumptions_ptr = DynLink.dlsym(hndl, "Z3_get_smtlib_num_assumptions")
  in
    dyn_Z3_get_smtlib_num_assumptions Z3_get_smtlib_num_assumptions_ptr (c)
  end

  fun Z3_set_reduce_distinct_callback (t,f) = 
  let
    val dyn_Z3_set_reduce_distinct_callback = _import * : DynLink.fptr -> (z3_theory * MLton.Pointer.t) -> unit;
    val Z3_set_reduce_distinct_callback_ptr = DynLink.dlsym(hndl, "Z3_set_reduce_distinct_callback")
  in
    dyn_Z3_set_reduce_distinct_callback Z3_set_reduce_distinct_callback_ptr (t,f)
  end

  fun Z3_stats_get_key (c,s,idx) = 
  let
    val dyn_Z3_stats_get_key = _import * : DynLink.fptr -> (z3_context * z3_stats * int) -> z3_string;
    val Z3_stats_get_key_ptr = DynLink.dlsym(hndl, "Z3_stats_get_key")
  in
    dyn_Z3_stats_get_key Z3_stats_get_key_ptr (c,s,idx)
  end

  fun Z3_theory_get_eqc_next (t,n) = 
  let
    val dyn_Z3_theory_get_eqc_next = _import * : DynLink.fptr -> (z3_theory * z3_ast) -> z3_ast;
    val Z3_theory_get_eqc_next_ptr = DynLink.dlsym(hndl, "Z3_theory_get_eqc_next")
  in
    dyn_Z3_theory_get_eqc_next Z3_theory_get_eqc_next_ptr (t,n)
  end

  fun Z3_mk_bvredand (c,t1) = 
  let
    val dyn_Z3_mk_bvredand = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_ast;
    val Z3_mk_bvredand_ptr = DynLink.dlsym(hndl, "Z3_mk_bvredand")
  in
    dyn_Z3_mk_bvredand Z3_mk_bvredand_ptr (c,t1)
  end

  fun Z3_func_decl_to_ast (c,f) = 
  let
    val dyn_Z3_func_decl_to_ast = _import * : DynLink.fptr -> (z3_context * z3_func_decl) -> z3_ast;
    val Z3_func_decl_to_ast_ptr = DynLink.dlsym(hndl, "Z3_func_decl_to_ast")
  in
    dyn_Z3_func_decl_to_ast Z3_func_decl_to_ast_ptr (c,f)
  end

  fun Z3_simplify_get_param_descrs (c) = 
  let
    val dyn_Z3_simplify_get_param_descrs = _import * : DynLink.fptr -> (z3_context) -> z3_param_descrs;
    val Z3_simplify_get_param_descrs_ptr = DynLink.dlsym(hndl, "Z3_simplify_get_param_descrs")
  in
    dyn_Z3_simplify_get_param_descrs Z3_simplify_get_param_descrs_ptr (c)
  end

  fun Z3_get_sort_kind (c,t) = 
  let
    val dyn_Z3_get_sort_kind = _import * : DynLink.fptr -> (z3_context * z3_sort) -> z3_sort_kind;
    val Z3_get_sort_kind_ptr = DynLink.dlsym(hndl, "Z3_get_sort_kind")
  in
    dyn_Z3_get_sort_kind Z3_get_sort_kind_ptr (c,t)
  end

  fun Z3_global_param_get (param_id,param_value) = 
  let
    val dyn_Z3_global_param_get = _import * : DynLink.fptr -> (z3_string * z3_string_ptr) -> z3_bool;
    val Z3_global_param_get_ptr = DynLink.dlsym(hndl, "Z3_global_param_get")
  in
    dyn_Z3_global_param_get Z3_global_param_get_ptr (param_id,param_value)
  end

  fun Z3_get_app_decl (c,a) = 
  let
    val dyn_Z3_get_app_decl = _import * : DynLink.fptr -> (z3_context * z3_app) -> z3_func_decl;
    val Z3_get_app_decl_ptr = DynLink.dlsym(hndl, "Z3_get_app_decl")
  in
    dyn_Z3_get_app_decl Z3_get_app_decl_ptr (c,a)
  end

  fun Z3_inc_ref (c,a) = 
  let
    val dyn_Z3_inc_ref = _import * : DynLink.fptr -> (z3_context * z3_ast) -> unit;
    val Z3_inc_ref_ptr = DynLink.dlsym(hndl, "Z3_inc_ref")
  in
    dyn_Z3_inc_ref Z3_inc_ref_ptr (c,a)
  end

  fun Z3_get_denominator (c,a) = 
  let
    val dyn_Z3_get_denominator = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_ast;
    val Z3_get_denominator_ptr = DynLink.dlsym(hndl, "Z3_get_denominator")
  in
    dyn_Z3_get_denominator Z3_get_denominator_ptr (c,a)
  end

  fun Z3_ast_vector_to_string (c,v) = 
  let
    val dyn_Z3_ast_vector_to_string = _import * : DynLink.fptr -> (z3_context * z3_ast_vector) -> z3_string;
    val Z3_ast_vector_to_string_ptr = DynLink.dlsym(hndl, "Z3_ast_vector_to_string")
  in
    dyn_Z3_ast_vector_to_string Z3_ast_vector_to_string_ptr (c,v)
  end

  fun Z3_func_entry_dec_ref (c,e) = 
  let
    val dyn_Z3_func_entry_dec_ref = _import * : DynLink.fptr -> (z3_context * z3_func_entry) -> unit;
    val Z3_func_entry_dec_ref_ptr = DynLink.dlsym(hndl, "Z3_func_entry_dec_ref")
  in
    dyn_Z3_func_entry_dec_ref Z3_func_entry_dec_ref_ptr (c,e)
  end

  fun Z3_eval_func_decl (c,m,decl,v) = 
  let
    val dyn_Z3_eval_func_decl = _import * : DynLink.fptr -> (z3_context * z3_model * z3_func_decl * MLton.Pointer.t) -> z3_bool;
    val Z3_eval_func_decl_ptr = DynLink.dlsym(hndl, "Z3_eval_func_decl")
  in
    dyn_Z3_eval_func_decl Z3_eval_func_decl_ptr (c,m,decl,v)
  end

  fun Z3_get_symbol_kind (c,s) = 
  let
    val dyn_Z3_get_symbol_kind = _import * : DynLink.fptr -> (z3_context * z3_symbol) -> z3_symbol_kind;
    val Z3_get_symbol_kind_ptr = DynLink.dlsym(hndl, "Z3_get_symbol_kind")
  in
    dyn_Z3_get_symbol_kind Z3_get_symbol_kind_ptr (c,s)
  end

  fun Z3_mk_bvmul_no_overflow (c,t1,t2,is_signed) = 
  let
    val dyn_Z3_mk_bvmul_no_overflow = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast * z3_bool) -> z3_ast;
    val Z3_mk_bvmul_no_overflow_ptr = DynLink.dlsym(hndl, "Z3_mk_bvmul_no_overflow")
  in
    dyn_Z3_mk_bvmul_no_overflow Z3_mk_bvmul_no_overflow_ptr (c,t1,t2,is_signed)
  end

  fun Z3_disable_trace (tag) = 
  let
    val dyn_Z3_disable_trace = _import * : DynLink.fptr -> (z3_string) -> unit;
    val Z3_disable_trace_ptr = DynLink.dlsym(hndl, "Z3_disable_trace")
  in
    dyn_Z3_disable_trace Z3_disable_trace_ptr (tag)
  end

  fun Z3_disable_literal (c,lbls,idx) = 
  let
    val dyn_Z3_disable_literal = _import * : DynLink.fptr -> (z3_context * z3_literals * int) -> unit;
    val Z3_disable_literal_ptr = DynLink.dlsym(hndl, "Z3_disable_literal")
  in
    dyn_Z3_disable_literal Z3_disable_literal_ptr (c,lbls,idx)
  end

  fun Z3_get_as_array_func_decl (c,a) = 
  let
    val dyn_Z3_get_as_array_func_decl = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_func_decl;
    val Z3_get_as_array_func_decl_ptr = DynLink.dlsym(hndl, "Z3_get_as_array_func_decl")
  in
    dyn_Z3_get_as_array_func_decl Z3_get_as_array_func_decl_ptr (c,a)
  end

  fun Z3_mk_bound (c,index,ty) = 
  let
    val dyn_Z3_mk_bound = _import * : DynLink.fptr -> (z3_context * int * z3_sort) -> z3_ast;
    val Z3_mk_bound_ptr = DynLink.dlsym(hndl, "Z3_mk_bound")
  in
    dyn_Z3_mk_bound Z3_mk_bound_ptr (c,index,ty)
  end

  fun Z3_probe_or (x,p1,p2) = 
  let
    val dyn_Z3_probe_or = _import * : DynLink.fptr -> (z3_context * z3_probe * z3_probe) -> z3_probe;
    val Z3_probe_or_ptr = DynLink.dlsym(hndl, "Z3_probe_or")
  in
    dyn_Z3_probe_or Z3_probe_or_ptr (x,p1,p2)
  end

  fun Z3_model_dec_ref (c,m) = 
  let
    val dyn_Z3_model_dec_ref = _import * : DynLink.fptr -> (z3_context * z3_model) -> unit;
    val Z3_model_dec_ref_ptr = DynLink.dlsym(hndl, "Z3_model_dec_ref")
  in
    dyn_Z3_model_dec_ref Z3_model_dec_ref_ptr (c,m)
  end

  fun Z3_mk_set_difference (c,arg1,arg2) = 
  let
    val dyn_Z3_mk_set_difference = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_set_difference_ptr = DynLink.dlsym(hndl, "Z3_mk_set_difference")
  in
    dyn_Z3_mk_set_difference Z3_mk_set_difference_ptr (c,arg1,arg2)
  end

  fun Z3_get_domain (c,d,i) = 
  let
    val dyn_Z3_get_domain = _import * : DynLink.fptr -> (z3_context * z3_func_decl * int) -> z3_sort;
    val Z3_get_domain_ptr = DynLink.dlsym(hndl, "Z3_get_domain")
  in
    dyn_Z3_get_domain Z3_get_domain_ptr (c,d,i)
  end

  fun Z3_get_decl_double_parameter (c,d,idx) = 
  let
    val dyn_Z3_get_decl_double_parameter = _import * : DynLink.fptr -> (z3_context * z3_func_decl * int) -> double;
    val Z3_get_decl_double_parameter_ptr = DynLink.dlsym(hndl, "Z3_get_decl_double_parameter")
  in
    dyn_Z3_get_decl_double_parameter Z3_get_decl_double_parameter_ptr (c,d,idx)
  end

  fun Z3_mk_bvurem (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvurem = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvurem_ptr = DynLink.dlsym(hndl, "Z3_mk_bvurem")
  in
    dyn_Z3_mk_bvurem Z3_mk_bvurem_ptr (c,t1,t2)
  end

  fun Z3_params_set_double (c,p,k,v) = 
  let
    val dyn_Z3_params_set_double = _import * : DynLink.fptr -> (z3_context * z3_params * z3_symbol * double) -> unit;
    val Z3_params_set_double_ptr = DynLink.dlsym(hndl, "Z3_params_set_double")
  in
    dyn_Z3_params_set_double Z3_params_set_double_ptr (c,p,k,v)
  end

  fun Z3_push (c) = 
  let
    val dyn_Z3_push = _import * : DynLink.fptr -> (z3_context) -> unit;
    val Z3_push_ptr = DynLink.dlsym(hndl, "Z3_push")
  in
    dyn_Z3_push Z3_push_ptr (c)
  end

  fun Z3_tactic_apply (c,t,g) = 
  let
    val dyn_Z3_tactic_apply = _import * : DynLink.fptr -> (z3_context * z3_tactic * z3_goal) -> z3_apply_result;
    val Z3_tactic_apply_ptr = DynLink.dlsym(hndl, "Z3_tactic_apply")
  in
    dyn_Z3_tactic_apply Z3_tactic_apply_ptr (c,t,g)
  end

  fun Z3_pattern_to_ast (c,p) = 
  let
    val dyn_Z3_pattern_to_ast = _import * : DynLink.fptr -> (z3_context * z3_pattern) -> z3_ast;
    val Z3_pattern_to_ast_ptr = DynLink.dlsym(hndl, "Z3_pattern_to_ast")
  in
    dyn_Z3_pattern_to_ast Z3_pattern_to_ast_ptr (c,p)
  end

  fun Z3_get_numeral_rational_int64 (c,v,num,den) = 
  let
    val dyn_Z3_get_numeral_rational_int64 = _import * : DynLink.fptr -> (z3_context * z3_ast * MLton.Pointer.t * MLton.Pointer.t) -> z3_bool;
    val Z3_get_numeral_rational_int64_ptr = DynLink.dlsym(hndl, "Z3_get_numeral_rational_int64")
  in
    dyn_Z3_get_numeral_rational_int64 Z3_get_numeral_rational_int64_ptr (c,v,num,den)
  end

  fun Z3_mk_set_union (c,num_args,args) = 
  let
    val dyn_Z3_mk_set_union = _import * : DynLink.fptr -> (z3_context * int * MLton.Pointer.t) -> z3_ast;
    val Z3_mk_set_union_ptr = DynLink.dlsym(hndl, "Z3_mk_set_union")
  in
    dyn_Z3_mk_set_union Z3_mk_set_union_ptr (c,num_args,args)
  end

  fun Z3_ast_vector_push (c,v,a) = 
  let
    val dyn_Z3_ast_vector_push = _import * : DynLink.fptr -> (z3_context * z3_ast_vector * z3_ast) -> unit;
    val Z3_ast_vector_push_ptr = DynLink.dlsym(hndl, "Z3_ast_vector_push")
  in
    dyn_Z3_ast_vector_push Z3_ast_vector_push_ptr (c,v,a)
  end

  fun Z3_mk_bvand (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvand = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvand_ptr = DynLink.dlsym(hndl, "Z3_mk_bvand")
  in
    dyn_Z3_mk_bvand Z3_mk_bvand_ptr (c,t1,t2)
  end

  fun Z3_mk_bvsub_no_underflow (c,t1,t2,is_signed) = 
  let
    val dyn_Z3_mk_bvsub_no_underflow = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast * z3_bool) -> z3_ast;
    val Z3_mk_bvsub_no_underflow_ptr = DynLink.dlsym(hndl, "Z3_mk_bvsub_no_underflow")
  in
    dyn_Z3_mk_bvsub_no_underflow Z3_mk_bvsub_no_underflow_ptr (c,t1,t2,is_signed)
  end

  fun Z3_theory_mk_value (c,t,n,s) = 
  let
    val dyn_Z3_theory_mk_value = _import * : DynLink.fptr -> (z3_context * z3_theory * z3_symbol * z3_sort) -> z3_ast;
    val Z3_theory_mk_value_ptr = DynLink.dlsym(hndl, "Z3_theory_mk_value")
  in
    dyn_Z3_theory_mk_value Z3_theory_mk_value_ptr (c,t,n,s)
  end

  fun Z3_ast_map_erase (c,m,k) = 
  let
    val dyn_Z3_ast_map_erase = _import * : DynLink.fptr -> (z3_context * z3_ast_map * z3_ast) -> unit;
    val Z3_ast_map_erase_ptr = DynLink.dlsym(hndl, "Z3_ast_map_erase")
  in
    dyn_Z3_ast_map_erase Z3_ast_map_erase_ptr (c,m,k)
  end

  fun Z3_get_num_literals (c,lbls) = 
  let
    val dyn_Z3_get_num_literals = _import * : DynLink.fptr -> (z3_context * z3_literals) -> int;
    val Z3_get_num_literals_ptr = DynLink.dlsym(hndl, "Z3_get_num_literals")
  in
    dyn_Z3_get_num_literals Z3_get_num_literals_ptr (c,lbls)
  end

  fun Z3_fixedpoint_get_assertions (c,f) = 
  let
    val dyn_Z3_fixedpoint_get_assertions = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint) -> z3_ast_vector;
    val Z3_fixedpoint_get_assertions_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_get_assertions")
  in
    dyn_Z3_fixedpoint_get_assertions Z3_fixedpoint_get_assertions_ptr (c,f)
  end

  fun Z3_update_term (c,a,num_args,args) = 
  let
    val dyn_Z3_update_term = _import * : DynLink.fptr -> (z3_context * z3_ast * int * MLton.Pointer.t) -> z3_ast;
    val Z3_update_term_ptr = DynLink.dlsym(hndl, "Z3_update_term")
  in
    dyn_Z3_update_term Z3_update_term_ptr (c,a,num_args,args)
  end

  fun Z3_get_sort_id (c,s) = 
  let
    val dyn_Z3_get_sort_id = _import * : DynLink.fptr -> (z3_context * z3_sort) -> int;
    val Z3_get_sort_id_ptr = DynLink.dlsym(hndl, "Z3_get_sort_id")
  in
    dyn_Z3_get_sort_id Z3_get_sort_id_ptr (c,s)
  end

  fun Z3_del_literals (c,lbls) = 
  let
    val dyn_Z3_del_literals = _import * : DynLink.fptr -> (z3_context * z3_literals) -> unit;
    val Z3_del_literals_ptr = DynLink.dlsym(hndl, "Z3_del_literals")
  in
    dyn_Z3_del_literals Z3_del_literals_ptr (c,lbls)
  end

  fun Z3_apply_result_get_subgoal (c,r,i) = 
  let
    val dyn_Z3_apply_result_get_subgoal = _import * : DynLink.fptr -> (z3_context * z3_apply_result * int) -> z3_goal;
    val Z3_apply_result_get_subgoal_ptr = DynLink.dlsym(hndl, "Z3_apply_result_get_subgoal")
  in
    dyn_Z3_apply_result_get_subgoal Z3_apply_result_get_subgoal_ptr (c,r,i)
  end

  fun Z3_is_eq_func_decl (c,f1,f2) = 
  let
    val dyn_Z3_is_eq_func_decl = _import * : DynLink.fptr -> (z3_context * z3_func_decl * z3_func_decl) -> z3_bool;
    val Z3_is_eq_func_decl_ptr = DynLink.dlsym(hndl, "Z3_is_eq_func_decl")
  in
    dyn_Z3_is_eq_func_decl Z3_is_eq_func_decl_ptr (c,f1,f2)
  end

  fun Z3_get_array_sort_range (c,t) = 
  let
    val dyn_Z3_get_array_sort_range = _import * : DynLink.fptr -> (z3_context * z3_sort) -> z3_sort;
    val Z3_get_array_sort_range_ptr = DynLink.dlsym(hndl, "Z3_get_array_sort_range")
  in
    dyn_Z3_get_array_sort_range Z3_get_array_sort_range_ptr (c,t)
  end

  fun Z3_mk_set_member (c,elem,set) = 
  let
    val dyn_Z3_mk_set_member = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_set_member_ptr = DynLink.dlsym(hndl, "Z3_mk_set_member")
  in
    dyn_Z3_mk_set_member Z3_mk_set_member_ptr (c,elem,set)
  end

  fun Z3_tactic_when (c,p,t) = 
  let
    val dyn_Z3_tactic_when = _import * : DynLink.fptr -> (z3_context * z3_probe * z3_tactic) -> z3_tactic;
    val Z3_tactic_when_ptr = DynLink.dlsym(hndl, "Z3_tactic_when")
  in
    dyn_Z3_tactic_when Z3_tactic_when_ptr (c,p,t)
  end

  fun Z3_goal_dec_ref (c,g) = 
  let
    val dyn_Z3_goal_dec_ref = _import * : DynLink.fptr -> (z3_context * z3_goal) -> unit;
    val Z3_goal_dec_ref_ptr = DynLink.dlsym(hndl, "Z3_goal_dec_ref")
  in
    dyn_Z3_goal_dec_ref Z3_goal_dec_ref_ptr (c,g)
  end

  fun Z3_ast_map_dec_ref (c,m) = 
  let
    val dyn_Z3_ast_map_dec_ref = _import * : DynLink.fptr -> (z3_context * z3_ast_map) -> unit;
    val Z3_ast_map_dec_ref_ptr = DynLink.dlsym(hndl, "Z3_ast_map_dec_ref")
  in
    dyn_Z3_ast_map_dec_ref Z3_ast_map_dec_ref_ptr (c,m)
  end

  fun Z3_stats_dec_ref (c,s) = 
  let
    val dyn_Z3_stats_dec_ref = _import * : DynLink.fptr -> (z3_context * z3_stats) -> unit;
    val Z3_stats_dec_ref_ptr = DynLink.dlsym(hndl, "Z3_stats_dec_ref")
  in
    dyn_Z3_stats_dec_ref Z3_stats_dec_ref_ptr (c,s)
  end

  fun Z3_set_new_app_callback (t,f) = 
  let
    val dyn_Z3_set_new_app_callback = _import * : DynLink.fptr -> (z3_theory * MLton.Pointer.t) -> unit;
    val Z3_set_new_app_callback_ptr = DynLink.dlsym(hndl, "Z3_set_new_app_callback")
  in
    dyn_Z3_set_new_app_callback Z3_set_new_app_callback_ptr (t,f)
  end

  fun Z3_mk_bv2int (c,t1,is_signed) = 
  let
    val dyn_Z3_mk_bv2int = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_bool) -> z3_ast;
    val Z3_mk_bv2int_ptr = DynLink.dlsym(hndl, "Z3_mk_bv2int")
  in
    dyn_Z3_mk_bv2int Z3_mk_bv2int_ptr (c,t1,is_signed)
  end

  fun Z3_get_numeral_string (c,a) = 
  let
    val dyn_Z3_get_numeral_string = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_string;
    val Z3_get_numeral_string_ptr = DynLink.dlsym(hndl, "Z3_get_numeral_string")
  in
    dyn_Z3_get_numeral_string Z3_get_numeral_string_ptr (c,a)
  end

  fun Z3_mk_unsigned_int64 (c,v,ty) = 
  let
    val dyn_Z3_mk_unsigned_int64 = _import * : DynLink.fptr -> (z3_context * int * z3_sort) -> z3_ast;
    val Z3_mk_unsigned_int64_ptr = DynLink.dlsym(hndl, "Z3_mk_unsigned_int64")
  in
    dyn_Z3_mk_unsigned_int64 Z3_mk_unsigned_int64_ptr (c,v,ty)
  end

  fun Z3_get_quantifier_weight (c,a) = 
  let
    val dyn_Z3_get_quantifier_weight = _import * : DynLink.fptr -> (z3_context * z3_ast) -> int;
    val Z3_get_quantifier_weight_ptr = DynLink.dlsym(hndl, "Z3_get_quantifier_weight")
  in
    dyn_Z3_get_quantifier_weight Z3_get_quantifier_weight_ptr (c,a)
  end

  fun Z3_mk_exists (c,weight,num_patterns,patterns,num_decls,sorts,decl_names,body) = 
  let
    val dyn_Z3_mk_exists = _import * : DynLink.fptr -> (z3_context * int * int * MLton.Pointer.t * int * MLton.Pointer.t * MLton.Pointer.t * z3_ast) -> z3_ast;
    val Z3_mk_exists_ptr = DynLink.dlsym(hndl, "Z3_mk_exists")
  in
    dyn_Z3_mk_exists Z3_mk_exists_ptr (c,weight,num_patterns,patterns,num_decls,sorts,decl_names,body)
  end

  fun Z3_mk_constructor_list (c,num_constructors,constructors) = 
  let
    val dyn_Z3_mk_constructor_list = _import * : DynLink.fptr -> (z3_context * int * MLton.Pointer.t) -> z3_constructor_list;
    val Z3_mk_constructor_list_ptr = DynLink.dlsym(hndl, "Z3_mk_constructor_list")
  in
    dyn_Z3_mk_constructor_list Z3_mk_constructor_list_ptr (c,num_constructors,constructors)
  end

  fun Z3_apply_result_dec_ref (c,r) = 
  let
    val dyn_Z3_apply_result_dec_ref = _import * : DynLink.fptr -> (z3_context * z3_apply_result) -> unit;
    val Z3_apply_result_dec_ref_ptr = DynLink.dlsym(hndl, "Z3_apply_result_dec_ref")
  in
    dyn_Z3_apply_result_dec_ref Z3_apply_result_dec_ref_ptr (c,r)
  end

  fun Z3_is_well_sorted (c,t) = 
  let
    val dyn_Z3_is_well_sorted = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_bool;
    val Z3_is_well_sorted_ptr = DynLink.dlsym(hndl, "Z3_is_well_sorted")
  in
    dyn_Z3_is_well_sorted Z3_is_well_sorted_ptr (c,t)
  end

  fun Z3_fixedpoint_init (c,d,state) = 
  let
    val dyn_Z3_fixedpoint_init = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint * MLton.Pointer.t) -> unit;
    val Z3_fixedpoint_init_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_init")
  in
    dyn_Z3_fixedpoint_init Z3_fixedpoint_init_ptr (c,d,state)
  end

  fun Z3_is_array_value (c,m,v,num_entries) = 
  let
    val dyn_Z3_is_array_value = _import * : DynLink.fptr -> (z3_context * z3_model * z3_ast * MLton.Pointer.t) -> z3_bool;
    val Z3_is_array_value_ptr = DynLink.dlsym(hndl, "Z3_is_array_value")
  in
    dyn_Z3_is_array_value Z3_is_array_value_ptr (c,m,v,num_entries)
  end

  fun Z3_mk_constructor (c,name,recognizer,num_fields,field_names,sorts,sort_refs) = 
  let
    val dyn_Z3_mk_constructor = _import * : DynLink.fptr -> (z3_context * z3_symbol * z3_symbol * int * MLton.Pointer.t * MLton.Pointer.t * MLton.Pointer.t) -> z3_constructor;
    val Z3_mk_constructor_ptr = DynLink.dlsym(hndl, "Z3_mk_constructor")
  in
    dyn_Z3_mk_constructor Z3_mk_constructor_ptr (c,name,recognizer,num_fields,field_names,sorts,sort_refs)
  end

  fun Z3_get_search_failure (c) = 
  let
    val dyn_Z3_get_search_failure = _import * : DynLink.fptr -> (z3_context) -> z3_search_failure;
    val Z3_get_search_failure_ptr = DynLink.dlsym(hndl, "Z3_get_search_failure")
  in
    dyn_Z3_get_search_failure Z3_get_search_failure_ptr (c)
  end

  fun Z3_model_get_func_decl (c,m,i) = 
  let
    val dyn_Z3_model_get_func_decl = _import * : DynLink.fptr -> (z3_context * z3_model * int) -> z3_func_decl;
    val Z3_model_get_func_decl_ptr = DynLink.dlsym(hndl, "Z3_model_get_func_decl")
  in
    dyn_Z3_model_get_func_decl Z3_model_get_func_decl_ptr (c,m,i)
  end

  fun Z3_mk_bvnand (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvnand = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvnand_ptr = DynLink.dlsym(hndl, "Z3_mk_bvnand")
  in
    dyn_Z3_mk_bvnand Z3_mk_bvnand_ptr (c,t1,t2)
  end

  fun Z3_set_new_elem_callback (t,f) = 
  let
    val dyn_Z3_set_new_elem_callback = _import * : DynLink.fptr -> (z3_theory * MLton.Pointer.t) -> unit;
    val Z3_set_new_elem_callback_ptr = DynLink.dlsym(hndl, "Z3_set_new_elem_callback")
  in
    dyn_Z3_set_new_elem_callback Z3_set_new_elem_callback_ptr (t,f)
  end

  fun Z3_get_finite_domain_sort_size (c,s,r) = 
  let
    val dyn_Z3_get_finite_domain_sort_size = _import * : DynLink.fptr -> (z3_context * z3_sort * MLton.Pointer.t) -> z3_bool;
    val Z3_get_finite_domain_sort_size_ptr = DynLink.dlsym(hndl, "Z3_get_finite_domain_sort_size")
  in
    dyn_Z3_get_finite_domain_sort_size Z3_get_finite_domain_sort_size_ptr (c,s,r)
  end

  fun Z3_param_descrs_get_name (c,p,i) = 
  let
    val dyn_Z3_param_descrs_get_name = _import * : DynLink.fptr -> (z3_context * z3_param_descrs * int) -> z3_symbol;
    val Z3_param_descrs_get_name_ptr = DynLink.dlsym(hndl, "Z3_param_descrs_get_name")
  in
    dyn_Z3_param_descrs_get_name Z3_param_descrs_get_name_ptr (c,p,i)
  end

  fun Z3_solver_check (c,s) = 
  let
    val dyn_Z3_solver_check = _import * : DynLink.fptr -> (z3_context * z3_solver) -> z3_lbool;
    val Z3_solver_check_ptr = DynLink.dlsym(hndl, "Z3_solver_check")
  in
    dyn_Z3_solver_check Z3_solver_check_ptr (c,s)
  end

  fun Z3_fixedpoint_get_statistics (c,d) = 
  let
    val dyn_Z3_fixedpoint_get_statistics = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint) -> z3_stats;
    val Z3_fixedpoint_get_statistics_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_get_statistics")
  in
    dyn_Z3_fixedpoint_get_statistics Z3_fixedpoint_get_statistics_ptr (c,d)
  end

  fun Z3_is_numeral_ast (c,a) = 
  let
    val dyn_Z3_is_numeral_ast = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_bool;
    val Z3_is_numeral_ast_ptr = DynLink.dlsym(hndl, "Z3_is_numeral_ast")
  in
    dyn_Z3_is_numeral_ast Z3_is_numeral_ast_ptr (c,a)
  end

  fun Z3_mk_tactic (c,name) = 
  let
    val dyn_Z3_mk_tactic = _import * : DynLink.fptr -> (z3_context * z3_string) -> z3_tactic;
    val Z3_mk_tactic_ptr = DynLink.dlsym(hndl, "Z3_mk_tactic")
  in
    dyn_Z3_mk_tactic Z3_mk_tactic_ptr (c,name)
  end

  fun Z3_mk_empty_set (c,domain) = 
  let
    val dyn_Z3_mk_empty_set = _import * : DynLink.fptr -> (z3_context * z3_sort) -> z3_ast;
    val Z3_mk_empty_set_ptr = DynLink.dlsym(hndl, "Z3_mk_empty_set")
  in
    dyn_Z3_mk_empty_set Z3_mk_empty_set_ptr (c,domain)
  end

  fun Z3_solver_pop (c,s,n) = 
  let
    val dyn_Z3_solver_pop = _import * : DynLink.fptr -> (z3_context * z3_solver * int) -> unit;
    val Z3_solver_pop_ptr = DynLink.dlsym(hndl, "Z3_solver_pop")
  in
    dyn_Z3_solver_pop Z3_solver_pop_ptr (c,s,n)
  end

  fun Z3_mk_lt (c,t1,t2) = 
  let
    val dyn_Z3_mk_lt = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_lt_ptr = DynLink.dlsym(hndl, "Z3_mk_lt")
  in
    dyn_Z3_mk_lt Z3_mk_lt_ptr (c,t1,t2)
  end

  fun Z3_is_quantifier_forall (c,a) = 
  let
    val dyn_Z3_is_quantifier_forall = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_bool;
    val Z3_is_quantifier_forall_ptr = DynLink.dlsym(hndl, "Z3_is_quantifier_forall")
  in
    dyn_Z3_is_quantifier_forall Z3_is_quantifier_forall_ptr (c,a)
  end

  fun Z3_tactic_or_else (c,t1,t2) = 
  let
    val dyn_Z3_tactic_or_else = _import * : DynLink.fptr -> (z3_context * z3_tactic * z3_tactic) -> z3_tactic;
    val Z3_tactic_or_else_ptr = DynLink.dlsym(hndl, "Z3_tactic_or_else")
  in
    dyn_Z3_tactic_or_else Z3_tactic_or_else_ptr (c,t1,t2)
  end

  fun Z3_fixedpoint_get_param_descrs (c,f) = 
  let
    val dyn_Z3_fixedpoint_get_param_descrs = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint) -> z3_param_descrs;
    val Z3_fixedpoint_get_param_descrs_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_get_param_descrs")
  in
    dyn_Z3_fixedpoint_get_param_descrs Z3_fixedpoint_get_param_descrs_ptr (c,f)
  end

  fun Z3_theory_get_app (t,i) = 
  let
    val dyn_Z3_theory_get_app = _import * : DynLink.fptr -> (z3_theory * int) -> z3_ast;
    val Z3_theory_get_app_ptr = DynLink.dlsym(hndl, "Z3_theory_get_app")
  in
    dyn_Z3_theory_get_app Z3_theory_get_app_ptr (t,i)
  end

  fun Z3_model_get_sort (c,m,i) = 
  let
    val dyn_Z3_model_get_sort = _import * : DynLink.fptr -> (z3_context * z3_model * int) -> z3_sort;
    val Z3_model_get_sort_ptr = DynLink.dlsym(hndl, "Z3_model_get_sort")
  in
    dyn_Z3_model_get_sort Z3_model_get_sort_ptr (c,m,i)
  end

  fun Z3_get_implied_equalities (c,s,num_terms,terms,class_ids) = 
  let
    val dyn_Z3_get_implied_equalities = _import * : DynLink.fptr -> (z3_context * z3_solver * int * MLton.Pointer.t * MLton.Pointer.t) -> z3_lbool;
    val Z3_get_implied_equalities_ptr = DynLink.dlsym(hndl, "Z3_get_implied_equalities")
  in
    dyn_Z3_get_implied_equalities Z3_get_implied_equalities_ptr (c,s,num_terms,terms,class_ids)
  end

  fun Z3_goal_inconsistent (c,g) = 
  let
    val dyn_Z3_goal_inconsistent = _import * : DynLink.fptr -> (z3_context * z3_goal) -> z3_bool;
    val Z3_goal_inconsistent_ptr = DynLink.dlsym(hndl, "Z3_goal_inconsistent")
  in
    dyn_Z3_goal_inconsistent Z3_goal_inconsistent_ptr (c,g)
  end

  fun Z3_enable_trace (tag) = 
  let
    val dyn_Z3_enable_trace = _import * : DynLink.fptr -> (z3_string) -> unit;
    val Z3_enable_trace_ptr = DynLink.dlsym(hndl, "Z3_enable_trace")
  in
    dyn_Z3_enable_trace Z3_enable_trace_ptr (tag)
  end

  fun Z3_apply_result_inc_ref (c,r) = 
  let
    val dyn_Z3_apply_result_inc_ref = _import * : DynLink.fptr -> (z3_context * z3_apply_result) -> unit;
    val Z3_apply_result_inc_ref_ptr = DynLink.dlsym(hndl, "Z3_apply_result_inc_ref")
  in
    dyn_Z3_apply_result_inc_ref Z3_apply_result_inc_ref_ptr (c,r)
  end

  fun Z3_model_to_string (c,m) = 
  let
    val dyn_Z3_model_to_string = _import * : DynLink.fptr -> (z3_context * z3_model) -> z3_string;
    val Z3_model_to_string_ptr = DynLink.dlsym(hndl, "Z3_model_to_string")
  in
    dyn_Z3_model_to_string Z3_model_to_string_ptr (c,m)
  end

  fun Z3_mk_add (c,num_args,args) = 
  let
    val dyn_Z3_mk_add = _import * : DynLink.fptr -> (z3_context * int * MLton.Pointer.t) -> z3_ast;
    val Z3_mk_add_ptr = DynLink.dlsym(hndl, "Z3_mk_add")
  in
    dyn_Z3_mk_add Z3_mk_add_ptr (c,num_args,args)
  end

  fun Z3_solver_dec_ref (c,s) = 
  let
    val dyn_Z3_solver_dec_ref = _import * : DynLink.fptr -> (z3_context * z3_solver) -> unit;
    val Z3_solver_dec_ref_ptr = DynLink.dlsym(hndl, "Z3_solver_dec_ref")
  in
    dyn_Z3_solver_dec_ref Z3_solver_dec_ref_ptr (c,s)
  end

  fun Z3_benchmark_to_smtlib_string (c,name,logic,status,attributes,num_assumptions,assumptions,formula) = 
  let
    val dyn_Z3_benchmark_to_smtlib_string = _import * : DynLink.fptr -> (z3_context * z3_string * z3_string * z3_string * z3_string * int * MLton.Pointer.t * z3_ast) -> z3_string;
    val Z3_benchmark_to_smtlib_string_ptr = DynLink.dlsym(hndl, "Z3_benchmark_to_smtlib_string")
  in
    dyn_Z3_benchmark_to_smtlib_string Z3_benchmark_to_smtlib_string_ptr (c,name,logic,status,attributes,num_assumptions,assumptions,formula)
  end

  fun Z3_mk_bvult (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvult = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvult_ptr = DynLink.dlsym(hndl, "Z3_mk_bvult")
  in
    dyn_Z3_mk_bvult Z3_mk_bvult_ptr (c,t1,t2)
  end

  fun Z3_mk_concat (c,t1,t2) = 
  let
    val dyn_Z3_mk_concat = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_concat_ptr = DynLink.dlsym(hndl, "Z3_mk_concat")
  in
    dyn_Z3_mk_concat Z3_mk_concat_ptr (c,t1,t2)
  end

  fun Z3_get_model_func_decl (c,m,i) = 
  let
    val dyn_Z3_get_model_func_decl = _import * : DynLink.fptr -> (z3_context * z3_model * int) -> z3_func_decl;
    val Z3_get_model_func_decl_ptr = DynLink.dlsym(hndl, "Z3_get_model_func_decl")
  in
    dyn_Z3_get_model_func_decl Z3_get_model_func_decl_ptr (c,m,i)
  end

  fun Z3_get_decl_num_parameters (c,d) = 
  let
    val dyn_Z3_get_decl_num_parameters = _import * : DynLink.fptr -> (z3_context * z3_func_decl) -> int;
    val Z3_get_decl_num_parameters_ptr = DynLink.dlsym(hndl, "Z3_get_decl_num_parameters")
  in
    dyn_Z3_get_decl_num_parameters Z3_get_decl_num_parameters_ptr (c,d)
  end

  fun Z3_parse_smtlib2_file (c,file_name,num_sorts,sort_names,sorts,num_decls,decl_names,decls) = 
  let
    val dyn_Z3_parse_smtlib2_file = _import * : DynLink.fptr -> (z3_context * z3_string * int * MLton.Pointer.t * MLton.Pointer.t * int * MLton.Pointer.t * MLton.Pointer.t) -> z3_ast;
    val Z3_parse_smtlib2_file_ptr = DynLink.dlsym(hndl, "Z3_parse_smtlib2_file")
  in
    dyn_Z3_parse_smtlib2_file Z3_parse_smtlib2_file_ptr (c,file_name,num_sorts,sort_names,sorts,num_decls,decl_names,decls)
  end

  fun Z3_fixedpoint_set_reduce_app_callback (c,d,cb) = 
  let
    val dyn_Z3_fixedpoint_set_reduce_app_callback = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint * MLton.Pointer.t) -> unit;
    val Z3_fixedpoint_set_reduce_app_callback_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_set_reduce_app_callback")
  in
    dyn_Z3_fixedpoint_set_reduce_app_callback Z3_fixedpoint_set_reduce_app_callback_ptr (c,d,cb)
  end

  fun Z3_get_decl_func_decl_parameter (c,d,idx) = 
  let
    val dyn_Z3_get_decl_func_decl_parameter = _import * : DynLink.fptr -> (z3_context * z3_func_decl * int) -> z3_func_decl;
    val Z3_get_decl_func_decl_parameter_ptr = DynLink.dlsym(hndl, "Z3_get_decl_func_decl_parameter")
  in
    dyn_Z3_get_decl_func_decl_parameter Z3_get_decl_func_decl_parameter_ptr (c,d,idx)
  end

  fun Z3_ast_map_find (c,m,k) = 
  let
    val dyn_Z3_ast_map_find = _import * : DynLink.fptr -> (z3_context * z3_ast_map * z3_ast) -> z3_ast;
    val Z3_ast_map_find_ptr = DynLink.dlsym(hndl, "Z3_ast_map_find")
  in
    dyn_Z3_ast_map_find Z3_ast_map_find_ptr (c,m,k)
  end

  fun Z3_probe_const (x,val) = 
  let
    val dyn_Z3_probe_const = _import * : DynLink.fptr -> (z3_context * double) -> z3_probe;
    val Z3_probe_const_ptr = DynLink.dlsym(hndl, "Z3_probe_const")
  in
    dyn_Z3_probe_const Z3_probe_const_ptr (x,val)
  end

  fun Z3_get_quantifier_no_pattern_ast (c,a,i) = 
  let
    val dyn_Z3_get_quantifier_no_pattern_ast = _import * : DynLink.fptr -> (z3_context * z3_ast * int) -> z3_ast;
    val Z3_get_quantifier_no_pattern_ast_ptr = DynLink.dlsym(hndl, "Z3_get_quantifier_no_pattern_ast")
  in
    dyn_Z3_get_quantifier_no_pattern_ast Z3_get_quantifier_no_pattern_ast_ptr (c,a,i)
  end

  fun Z3_set_pop_callback (t,f) = 
  let
    val dyn_Z3_set_pop_callback = _import * : DynLink.fptr -> (z3_theory * MLton.Pointer.t) -> unit;
    val Z3_set_pop_callback_ptr = DynLink.dlsym(hndl, "Z3_set_pop_callback")
  in
    dyn_Z3_set_pop_callback Z3_set_pop_callback_ptr (t,f)
  end

  fun Z3_simplify (c,a) = 
  let
    val dyn_Z3_simplify = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_ast;
    val Z3_simplify_ptr = DynLink.dlsym(hndl, "Z3_simplify")
  in
    dyn_Z3_simplify Z3_simplify_ptr (c,a)
  end

  fun Z3_stats_get_double_value (c,s,idx) = 
  let
    val dyn_Z3_stats_get_double_value = _import * : DynLink.fptr -> (z3_context * z3_stats * int) -> double;
    val Z3_stats_get_double_value_ptr = DynLink.dlsym(hndl, "Z3_stats_get_double_value")
  in
    dyn_Z3_stats_get_double_value Z3_stats_get_double_value_ptr (c,s,idx)
  end

  fun Z3_fixedpoint_get_rules (c,f) = 
  let
    val dyn_Z3_fixedpoint_get_rules = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint) -> z3_ast_vector;
    val Z3_fixedpoint_get_rules_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_get_rules")
  in
    dyn_Z3_fixedpoint_get_rules Z3_fixedpoint_get_rules_ptr (c,f)
  end

  fun Z3_get_decl_ast_parameter (c,d,idx) = 
  let
    val dyn_Z3_get_decl_ast_parameter = _import * : DynLink.fptr -> (z3_context * z3_func_decl * int) -> z3_ast;
    val Z3_get_decl_ast_parameter_ptr = DynLink.dlsym(hndl, "Z3_get_decl_ast_parameter")
  in
    dyn_Z3_get_decl_ast_parameter Z3_get_decl_ast_parameter_ptr (c,d,idx)
  end

  fun Z3_ast_to_string (c,a) = 
  let
    val dyn_Z3_ast_to_string = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_string;
    val Z3_ast_to_string_ptr = DynLink.dlsym(hndl, "Z3_ast_to_string")
  in
    dyn_Z3_ast_to_string Z3_ast_to_string_ptr (c,a)
  end

  fun Z3_get_app_num_args (c,a) = 
  let
    val dyn_Z3_get_app_num_args = _import * : DynLink.fptr -> (z3_context * z3_app) -> int;
    val Z3_get_app_num_args_ptr = DynLink.dlsym(hndl, "Z3_get_app_num_args")
  in
    dyn_Z3_get_app_num_args Z3_get_app_num_args_ptr (c,a)
  end

  fun Z3_params_inc_ref (c,p) = 
  let
    val dyn_Z3_params_inc_ref = _import * : DynLink.fptr -> (z3_context * z3_params) -> unit;
    val Z3_params_inc_ref_ptr = DynLink.dlsym(hndl, "Z3_params_inc_ref")
  in
    dyn_Z3_params_inc_ref Z3_params_inc_ref_ptr (c,p)
  end

  fun Z3_solver_get_statistics (c,s) = 
  let
    val dyn_Z3_solver_get_statistics = _import * : DynLink.fptr -> (z3_context * z3_solver) -> z3_stats;
    val Z3_solver_get_statistics_ptr = DynLink.dlsym(hndl, "Z3_solver_get_statistics")
  in
    dyn_Z3_solver_get_statistics Z3_solver_get_statistics_ptr (c,s)
  end

  fun Z3_set_new_eq_callback (t,f) = 
  let
    val dyn_Z3_set_new_eq_callback = _import * : DynLink.fptr -> (z3_theory * MLton.Pointer.t) -> unit;
    val Z3_set_new_eq_callback_ptr = DynLink.dlsym(hndl, "Z3_set_new_eq_callback")
  in
    dyn_Z3_set_new_eq_callback Z3_set_new_eq_callback_ptr (t,f)
  end

  fun Z3_mk_not (c,a) = 
  let
    val dyn_Z3_mk_not = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_ast;
    val Z3_mk_not_ptr = DynLink.dlsym(hndl, "Z3_mk_not")
  in
    dyn_Z3_mk_not Z3_mk_not_ptr (c,a)
  end

  fun Z3_fixedpoint_set_reduce_assign_callback (c,d,cb) = 
  let
    val dyn_Z3_fixedpoint_set_reduce_assign_callback = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint * MLton.Pointer.t) -> unit;
    val Z3_fixedpoint_set_reduce_assign_callback_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_set_reduce_assign_callback")
  in
    dyn_Z3_fixedpoint_set_reduce_assign_callback Z3_fixedpoint_set_reduce_assign_callback_ptr (c,d,cb)
  end

  fun Z3_mk_finite_domain_sort (c,name,size) = 
  let
    val dyn_Z3_mk_finite_domain_sort = _import * : DynLink.fptr -> (z3_context * z3_symbol * int) -> z3_sort;
    val Z3_mk_finite_domain_sort_ptr = DynLink.dlsym(hndl, "Z3_mk_finite_domain_sort")
  in
    dyn_Z3_mk_finite_domain_sort Z3_mk_finite_domain_sort_ptr (c,name,size)
  end

  fun Z3_get_model_func_entry_num_args (c,m,i,j) = 
  let
    val dyn_Z3_get_model_func_entry_num_args = _import * : DynLink.fptr -> (z3_context * z3_model * int * int) -> int;
    val Z3_get_model_func_entry_num_args_ptr = DynLink.dlsym(hndl, "Z3_get_model_func_entry_num_args")
  in
    dyn_Z3_get_model_func_entry_num_args Z3_get_model_func_entry_num_args_ptr (c,m,i,j)
  end

  fun Z3_get_symbol_int (c,s) = 
  let
    val dyn_Z3_get_symbol_int = _import * : DynLink.fptr -> (z3_context * z3_symbol) -> int;
    val Z3_get_symbol_int_ptr = DynLink.dlsym(hndl, "Z3_get_symbol_int")
  in
    dyn_Z3_get_symbol_int Z3_get_symbol_int_ptr (c,s)
  end

  fun Z3_get_model_num_funcs (c,m) = 
  let
    val dyn_Z3_get_model_num_funcs = _import * : DynLink.fptr -> (z3_context * z3_model) -> int;
    val Z3_get_model_num_funcs_ptr = DynLink.dlsym(hndl, "Z3_get_model_num_funcs")
  in
    dyn_Z3_get_model_num_funcs Z3_get_model_num_funcs_ptr (c,m)
  end

  fun Z3_model_get_const_decl (c,m,i) = 
  let
    val dyn_Z3_model_get_const_decl = _import * : DynLink.fptr -> (z3_context * z3_model * int) -> z3_func_decl;
    val Z3_model_get_const_decl_ptr = DynLink.dlsym(hndl, "Z3_model_get_const_decl")
  in
    dyn_Z3_model_get_const_decl Z3_model_get_const_decl_ptr (c,m,i)
  end

  fun Z3_set_delete_callback (t,f) = 
  let
    val dyn_Z3_set_delete_callback = _import * : DynLink.fptr -> (z3_theory * MLton.Pointer.t) -> unit;
    val Z3_set_delete_callback_ptr = DynLink.dlsym(hndl, "Z3_set_delete_callback")
  in
    dyn_Z3_set_delete_callback Z3_set_delete_callback_ptr (t,f)
  end

  fun Z3_set_param_value (c,param_id,param_value) = 
  let
    val dyn_Z3_set_param_value = _import * : DynLink.fptr -> (z3_config * z3_string * z3_string) -> unit;
    val Z3_set_param_value_ptr = DynLink.dlsym(hndl, "Z3_set_param_value")
  in
    dyn_Z3_set_param_value Z3_set_param_value_ptr (c,param_id,param_value)
  end

  fun Z3_check (c) = 
  let
    val dyn_Z3_check = _import * : DynLink.fptr -> (z3_context) -> z3_lbool;
    val Z3_check_ptr = DynLink.dlsym(hndl, "Z3_check")
  in
    dyn_Z3_check Z3_check_ptr (c)
  end

  fun Z3_set_reset_callback (t,f) = 
  let
    val dyn_Z3_set_reset_callback = _import * : DynLink.fptr -> (z3_theory * MLton.Pointer.t) -> unit;
    val Z3_set_reset_callback_ptr = DynLink.dlsym(hndl, "Z3_set_reset_callback")
  in
    dyn_Z3_set_reset_callback Z3_set_reset_callback_ptr (t,f)
  end

  fun Z3_mk_bvredor (c,t1) = 
  let
    val dyn_Z3_mk_bvredor = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_ast;
    val Z3_mk_bvredor_ptr = DynLink.dlsym(hndl, "Z3_mk_bvredor")
  in
    dyn_Z3_mk_bvredor Z3_mk_bvredor_ptr (c,t1)
  end

  fun Z3_solver_get_proof (c,s) = 
  let
    val dyn_Z3_solver_get_proof = _import * : DynLink.fptr -> (z3_context * z3_solver) -> z3_ast;
    val Z3_solver_get_proof_ptr = DynLink.dlsym(hndl, "Z3_solver_get_proof")
  in
    dyn_Z3_solver_get_proof Z3_solver_get_proof_ptr (c,s)
  end

  fun Z3_ast_vector_inc_ref (c,v) = 
  let
    val dyn_Z3_ast_vector_inc_ref = _import * : DynLink.fptr -> (z3_context * z3_ast_vector) -> unit;
    val Z3_ast_vector_inc_ref_ptr = DynLink.dlsym(hndl, "Z3_ast_vector_inc_ref")
  in
    dyn_Z3_ast_vector_inc_ref Z3_ast_vector_inc_ref_ptr (c,v)
  end

  fun Z3_is_algebraic_number (c,a) = 
  let
    val dyn_Z3_is_algebraic_number = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_bool;
    val Z3_is_algebraic_number_ptr = DynLink.dlsym(hndl, "Z3_is_algebraic_number")
  in
    dyn_Z3_is_algebraic_number Z3_is_algebraic_number_ptr (c,a)
  end

  fun Z3_get_model_num_constants (c,m) = 
  let
    val dyn_Z3_get_model_num_constants = _import * : DynLink.fptr -> (z3_context * z3_model) -> int;
    val Z3_get_model_num_constants_ptr = DynLink.dlsym(hndl, "Z3_get_model_num_constants")
  in
    dyn_Z3_get_model_num_constants Z3_get_model_num_constants_ptr (c,m)
  end

  fun Z3_probe_le (x,p1,p2) = 
  let
    val dyn_Z3_probe_le = _import * : DynLink.fptr -> (z3_context * z3_probe * z3_probe) -> z3_probe;
    val Z3_probe_le_ptr = DynLink.dlsym(hndl, "Z3_probe_le")
  in
    dyn_Z3_probe_le Z3_probe_le_ptr (x,p1,p2)
  end

  fun Z3_probe_inc_ref (c,p) = 
  let
    val dyn_Z3_probe_inc_ref = _import * : DynLink.fptr -> (z3_context * z3_probe) -> unit;
    val Z3_probe_inc_ref_ptr = DynLink.dlsym(hndl, "Z3_probe_inc_ref")
  in
    dyn_Z3_probe_inc_ref Z3_probe_inc_ref_ptr (c,p)
  end

  fun Z3_mk_bvslt (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvslt = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvslt_ptr = DynLink.dlsym(hndl, "Z3_mk_bvslt")
  in
    dyn_Z3_mk_bvslt Z3_mk_bvslt_ptr (c,t1,t2)
  end

  fun Z3_ast_map_size (c,m) = 
  let
    val dyn_Z3_ast_map_size = _import * : DynLink.fptr -> (z3_context * z3_ast_map) -> int;
    val Z3_ast_map_size_ptr = DynLink.dlsym(hndl, "Z3_ast_map_size")
  in
    dyn_Z3_ast_map_size Z3_ast_map_size_ptr (c,m)
  end

  fun Z3_get_relation_column (c,s,col) = 
  let
    val dyn_Z3_get_relation_column = _import * : DynLink.fptr -> (z3_context * z3_sort * int) -> z3_sort;
    val Z3_get_relation_column_ptr = DynLink.dlsym(hndl, "Z3_get_relation_column")
  in
    dyn_Z3_get_relation_column Z3_get_relation_column_ptr (c,s,col)
  end

  fun Z3_get_sort_name (c,d) = 
  let
    val dyn_Z3_get_sort_name = _import * : DynLink.fptr -> (z3_context * z3_sort) -> z3_symbol;
    val Z3_get_sort_name_ptr = DynLink.dlsym(hndl, "Z3_get_sort_name")
  in
    dyn_Z3_get_sort_name Z3_get_sort_name_ptr (c,d)
  end

  fun Z3_func_interp_get_num_entries (c,f) = 
  let
    val dyn_Z3_func_interp_get_num_entries = _import * : DynLink.fptr -> (z3_context * z3_func_interp) -> int;
    val Z3_func_interp_get_num_entries_ptr = DynLink.dlsym(hndl, "Z3_func_interp_get_num_entries")
  in
    dyn_Z3_func_interp_get_num_entries Z3_func_interp_get_num_entries_ptr (c,f)
  end

  fun Z3_model_eval (c,m,t,model_completion,v) = 
  let
    val dyn_Z3_model_eval = _import * : DynLink.fptr -> (z3_context * z3_model * z3_ast * z3_bool * MLton.Pointer.t) -> z3_bool;
    val Z3_model_eval_ptr = DynLink.dlsym(hndl, "Z3_model_eval")
  in
    dyn_Z3_model_eval Z3_model_eval_ptr (c,m,t,model_completion,v)
  end

  fun Z3_probe_not (x,p) = 
  let
    val dyn_Z3_probe_not = _import * : DynLink.fptr -> (z3_context * z3_probe) -> z3_probe;
    val Z3_probe_not_ptr = DynLink.dlsym(hndl, "Z3_probe_not")
  in
    dyn_Z3_probe_not Z3_probe_not_ptr (x,p)
  end

  fun Z3_ast_vector_resize (c,v,n) = 
  let
    val dyn_Z3_ast_vector_resize = _import * : DynLink.fptr -> (z3_context * z3_ast_vector * int) -> unit;
    val Z3_ast_vector_resize_ptr = DynLink.dlsym(hndl, "Z3_ast_vector_resize")
  in
    dyn_Z3_ast_vector_resize Z3_ast_vector_resize_ptr (c,v,n)
  end

  fun Z3_goal_reset (c,g) = 
  let
    val dyn_Z3_goal_reset = _import * : DynLink.fptr -> (z3_context * z3_goal) -> unit;
    val Z3_goal_reset_ptr = DynLink.dlsym(hndl, "Z3_goal_reset")
  in
    dyn_Z3_goal_reset Z3_goal_reset_ptr (c,g)
  end

  fun Z3_get_ast_id (c,t) = 
  let
    val dyn_Z3_get_ast_id = _import * : DynLink.fptr -> (z3_context * z3_ast) -> int;
    val Z3_get_ast_id_ptr = DynLink.dlsym(hndl, "Z3_get_ast_id")
  in
    dyn_Z3_get_ast_id Z3_get_ast_id_ptr (c,t)
  end

  fun Z3_tactic_get_param_descrs (c,t) = 
  let
    val dyn_Z3_tactic_get_param_descrs = _import * : DynLink.fptr -> (z3_context * z3_tactic) -> z3_param_descrs;
    val Z3_tactic_get_param_descrs_ptr = DynLink.dlsym(hndl, "Z3_tactic_get_param_descrs")
  in
    dyn_Z3_tactic_get_param_descrs Z3_tactic_get_param_descrs_ptr (c,t)
  end

  fun Z3_mk_set_add (c,set,elem) = 
  let
    val dyn_Z3_mk_set_add = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_set_add_ptr = DynLink.dlsym(hndl, "Z3_mk_set_add")
  in
    dyn_Z3_mk_set_add Z3_mk_set_add_ptr (c,set,elem)
  end

  fun Z3_get_quantifier_num_patterns (c,a) = 
  let
    val dyn_Z3_get_quantifier_num_patterns = _import * : DynLink.fptr -> (z3_context * z3_ast) -> int;
    val Z3_get_quantifier_num_patterns_ptr = DynLink.dlsym(hndl, "Z3_get_quantifier_num_patterns")
  in
    dyn_Z3_get_quantifier_num_patterns Z3_get_quantifier_num_patterns_ptr (c,a)
  end

  fun Z3_fixedpoint_dec_ref (c,d) = 
  let
    val dyn_Z3_fixedpoint_dec_ref = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint) -> unit;
    val Z3_fixedpoint_dec_ref_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_dec_ref")
  in
    dyn_Z3_fixedpoint_dec_ref Z3_fixedpoint_dec_ref_ptr (c,d)
  end

  fun Z3_theory_get_num_elems (t) = 
  let
    val dyn_Z3_theory_get_num_elems = _import * : DynLink.fptr -> (z3_theory) -> int;
    val Z3_theory_get_num_elems_ptr = DynLink.dlsym(hndl, "Z3_theory_get_num_elems")
  in
    dyn_Z3_theory_get_num_elems Z3_theory_get_num_elems_ptr (t)
  end

  fun Z3_model_get_num_consts (c,m) = 
  let
    val dyn_Z3_model_get_num_consts = _import * : DynLink.fptr -> (z3_context * z3_model) -> int;
    val Z3_model_get_num_consts_ptr = DynLink.dlsym(hndl, "Z3_model_get_num_consts")
  in
    dyn_Z3_model_get_num_consts Z3_model_get_num_consts_ptr (c,m)
  end

  fun Z3_probe_get_descr (c,name) = 
  let
    val dyn_Z3_probe_get_descr = _import * : DynLink.fptr -> (z3_context * z3_string) -> z3_string;
    val Z3_probe_get_descr_ptr = DynLink.dlsym(hndl, "Z3_probe_get_descr")
  in
    dyn_Z3_probe_get_descr Z3_probe_get_descr_ptr (c,name)
  end

  fun Z3_mk_ast_map (c) = 
  let
    val dyn_Z3_mk_ast_map = _import * : DynLink.fptr -> (z3_context) -> z3_ast_map;
    val Z3_mk_ast_map_ptr = DynLink.dlsym(hndl, "Z3_mk_ast_map")
  in
    dyn_Z3_mk_ast_map Z3_mk_ast_map_ptr (c)
  end

  fun Z3_fixedpoint_set_predicate_representation (c,d,f,num_relations,relation_kinds) = 
  let
    val dyn_Z3_fixedpoint_set_predicate_representation = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint * z3_func_decl * int * MLton.Pointer.t) -> unit;
    val Z3_fixedpoint_set_predicate_representation_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_set_predicate_representation")
  in
    dyn_Z3_fixedpoint_set_predicate_representation Z3_fixedpoint_set_predicate_representation_ptr (c,d,f,num_relations,relation_kinds)
  end

  fun Z3_mk_forall_const (c,weight,num_bound,bound,num_patterns,patterns,body) = 
  let
    val dyn_Z3_mk_forall_const = _import * : DynLink.fptr -> (z3_context * int * int * MLton.Pointer.t * int * MLton.Pointer.t * z3_ast) -> z3_ast;
    val Z3_mk_forall_const_ptr = DynLink.dlsym(hndl, "Z3_mk_forall_const")
  in
    dyn_Z3_mk_forall_const Z3_mk_forall_const_ptr (c,weight,num_bound,bound,num_patterns,patterns,body)
  end

  fun Z3_get_decl_kind (c,d) = 
  let
    val dyn_Z3_get_decl_kind = _import * : DynLink.fptr -> (z3_context * z3_func_decl) -> z3_decl_kind;
    val Z3_get_decl_kind_ptr = DynLink.dlsym(hndl, "Z3_get_decl_kind")
  in
    dyn_Z3_get_decl_kind Z3_get_decl_kind_ptr (c,d)
  end

  fun Z3_mk_full_set (c,domain) = 
  let
    val dyn_Z3_mk_full_set = _import * : DynLink.fptr -> (z3_context * z3_sort) -> z3_ast;
    val Z3_mk_full_set_ptr = DynLink.dlsym(hndl, "Z3_mk_full_set")
  in
    dyn_Z3_mk_full_set Z3_mk_full_set_ptr (c,domain)
  end

  fun Z3_fixedpoint_from_string (c,f,s) = 
  let
    val dyn_Z3_fixedpoint_from_string = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint * z3_string) -> z3_ast_vector;
    val Z3_fixedpoint_from_string_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_from_string")
  in
    dyn_Z3_fixedpoint_from_string Z3_fixedpoint_from_string_ptr (c,f,s)
  end

  fun Z3_del_constructor (c,constr) = 
  let
    val dyn_Z3_del_constructor = _import * : DynLink.fptr -> (z3_context * z3_constructor) -> unit;
    val Z3_del_constructor_ptr = DynLink.dlsym(hndl, "Z3_del_constructor")
  in
    dyn_Z3_del_constructor Z3_del_constructor_ptr (c,constr)
  end

  fun Z3_mk_quantifier_const (c,is_forall,weight,num_bound,bound,num_patterns,patterns,body) = 
  let
    val dyn_Z3_mk_quantifier_const = _import * : DynLink.fptr -> (z3_context * z3_bool * int * int * MLton.Pointer.t * int * MLton.Pointer.t * z3_ast) -> z3_ast;
    val Z3_mk_quantifier_const_ptr = DynLink.dlsym(hndl, "Z3_mk_quantifier_const")
  in
    dyn_Z3_mk_quantifier_const Z3_mk_quantifier_const_ptr (c,is_forall,weight,num_bound,bound,num_patterns,patterns,body)
  end

  fun Z3_tactic_par_or (c,num,ts) = 
  let
    val dyn_Z3_tactic_par_or = _import * : DynLink.fptr -> (z3_context * int * MLton.Pointer.t) -> z3_tactic;
    val Z3_tactic_par_or_ptr = DynLink.dlsym(hndl, "Z3_tactic_par_or")
  in
    dyn_Z3_tactic_par_or Z3_tactic_par_or_ptr (c,num,ts)
  end

  fun Z3_get_probe_name (c,i) = 
  let
    val dyn_Z3_get_probe_name = _import * : DynLink.fptr -> (z3_context * int) -> z3_string;
    val Z3_get_probe_name_ptr = DynLink.dlsym(hndl, "Z3_get_probe_name")
  in
    dyn_Z3_get_probe_name Z3_get_probe_name_ptr (c,i)
  end

  fun Z3_theory_is_value (t,n) = 
  let
    val dyn_Z3_theory_is_value = _import * : DynLink.fptr -> (z3_theory * z3_ast) -> z3_bool;
    val Z3_theory_is_value_ptr = DynLink.dlsym(hndl, "Z3_theory_is_value")
  in
    dyn_Z3_theory_is_value Z3_theory_is_value_ptr (t,n)
  end

  fun Z3_get_decl_symbol_parameter (c,d,idx) = 
  let
    val dyn_Z3_get_decl_symbol_parameter = _import * : DynLink.fptr -> (z3_context * z3_func_decl * int) -> z3_symbol;
    val Z3_get_decl_symbol_parameter_ptr = DynLink.dlsym(hndl, "Z3_get_decl_symbol_parameter")
  in
    dyn_Z3_get_decl_symbol_parameter Z3_get_decl_symbol_parameter_ptr (c,d,idx)
  end

  fun Z3_mk_sign_ext (c,i,t1) = 
  let
    val dyn_Z3_mk_sign_ext = _import * : DynLink.fptr -> (z3_context * int * z3_ast) -> z3_ast;
    val Z3_mk_sign_ext_ptr = DynLink.dlsym(hndl, "Z3_mk_sign_ext")
  in
    dyn_Z3_mk_sign_ext Z3_mk_sign_ext_ptr (c,i,t1)
  end

  fun Z3_mk_ext_rotate_right (c,t1,t2) = 
  let
    val dyn_Z3_mk_ext_rotate_right = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_ext_rotate_right_ptr = DynLink.dlsym(hndl, "Z3_mk_ext_rotate_right")
  in
    dyn_Z3_mk_ext_rotate_right Z3_mk_ext_rotate_right_ptr (c,t1,t2)
  end

  fun Z3_get_numeral_decimal_string (c,a,precision) = 
  let
    val dyn_Z3_get_numeral_decimal_string = _import * : DynLink.fptr -> (z3_context * z3_ast * int) -> z3_string;
    val Z3_get_numeral_decimal_string_ptr = DynLink.dlsym(hndl, "Z3_get_numeral_decimal_string")
  in
    dyn_Z3_get_numeral_decimal_string Z3_get_numeral_decimal_string_ptr (c,a,precision)
  end

  fun Z3_get_error_code (c) = 
  let
    val dyn_Z3_get_error_code = _import * : DynLink.fptr -> (z3_context) -> z3_error_code;
    val Z3_get_error_code_ptr = DynLink.dlsym(hndl, "Z3_get_error_code")
  in
    dyn_Z3_get_error_code Z3_get_error_code_ptr (c)
  end

  fun Z3_model_get_num_funcs (c,m) = 
  let
    val dyn_Z3_model_get_num_funcs = _import * : DynLink.fptr -> (z3_context * z3_model) -> int;
    val Z3_model_get_num_funcs_ptr = DynLink.dlsym(hndl, "Z3_model_get_num_funcs")
  in
    dyn_Z3_model_get_num_funcs Z3_model_get_num_funcs_ptr (c,m)
  end

  fun Z3_get_range (c,d) = 
  let
    val dyn_Z3_get_range = _import * : DynLink.fptr -> (z3_context * z3_func_decl) -> z3_sort;
    val Z3_get_range_ptr = DynLink.dlsym(hndl, "Z3_get_range")
  in
    dyn_Z3_get_range Z3_get_range_ptr (c,d)
  end

  fun Z3_params_to_string (c,p) = 
  let
    val dyn_Z3_params_to_string = _import * : DynLink.fptr -> (z3_context * z3_params) -> z3_string;
    val Z3_params_to_string_ptr = DynLink.dlsym(hndl, "Z3_params_to_string")
  in
    dyn_Z3_params_to_string Z3_params_to_string_ptr (c,p)
  end

  fun Z3_tactic_par_and_then (c,t1,t2) = 
  let
    val dyn_Z3_tactic_par_and_then = _import * : DynLink.fptr -> (z3_context * z3_tactic * z3_tactic) -> z3_tactic;
    val Z3_tactic_par_and_then_ptr = DynLink.dlsym(hndl, "Z3_tactic_par_and_then")
  in
    dyn_Z3_tactic_par_and_then Z3_tactic_par_and_then_ptr (c,t1,t2)
  end

  fun Z3_mk_string_symbol (c,s) = 
  let
    val dyn_Z3_mk_string_symbol = _import * : DynLink.fptr -> (z3_context * z3_string) -> z3_symbol;
    val Z3_mk_string_symbol_ptr = DynLink.dlsym(hndl, "Z3_mk_string_symbol")
  in
    dyn_Z3_mk_string_symbol Z3_mk_string_symbol_ptr (c,s)
  end

  fun Z3_get_context_assignment (c) = 
  let
    val dyn_Z3_get_context_assignment = _import * : DynLink.fptr -> (z3_context) -> z3_ast;
    val Z3_get_context_assignment_ptr = DynLink.dlsym(hndl, "Z3_get_context_assignment")
  in
    dyn_Z3_get_context_assignment Z3_get_context_assignment_ptr (c)
  end

  fun Z3_func_interp_get_arity (c,f) = 
  let
    val dyn_Z3_func_interp_get_arity = _import * : DynLink.fptr -> (z3_context * z3_func_interp) -> int;
    val Z3_func_interp_get_arity_ptr = DynLink.dlsym(hndl, "Z3_func_interp_get_arity")
  in
    dyn_Z3_func_interp_get_arity Z3_func_interp_get_arity_ptr (c,f)
  end

  fun Z3_apply_result_convert_model (c,r,i,m) = 
  let
    val dyn_Z3_apply_result_convert_model = _import * : DynLink.fptr -> (z3_context * z3_apply_result * int * z3_model) -> z3_model;
    val Z3_apply_result_convert_model_ptr = DynLink.dlsym(hndl, "Z3_apply_result_convert_model")
  in
    dyn_Z3_apply_result_convert_model Z3_apply_result_convert_model_ptr (c,r,i,m)
  end

  fun Z3_func_interp_get_else (c,f) = 
  let
    val dyn_Z3_func_interp_get_else = _import * : DynLink.fptr -> (z3_context * z3_func_interp) -> z3_ast;
    val Z3_func_interp_get_else_ptr = DynLink.dlsym(hndl, "Z3_func_interp_get_else")
  in
    dyn_Z3_func_interp_get_else Z3_func_interp_get_else_ptr (c,f)
  end

  fun Z3_mk_mul (c,num_args,args) = 
  let
    val dyn_Z3_mk_mul = _import * : DynLink.fptr -> (z3_context * int * MLton.Pointer.t) -> z3_ast;
    val Z3_mk_mul_ptr = DynLink.dlsym(hndl, "Z3_mk_mul")
  in
    dyn_Z3_mk_mul Z3_mk_mul_ptr (c,num_args,args)
  end

  fun Z3_mk_xor (c,t1,t2) = 
  let
    val dyn_Z3_mk_xor = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_xor_ptr = DynLink.dlsym(hndl, "Z3_mk_xor")
  in
    dyn_Z3_mk_xor Z3_mk_xor_ptr (c,t1,t2)
  end

  fun Z3_mk_context_rc (c) = 
  let
    val dyn_Z3_mk_context_rc = _import * : DynLink.fptr -> (z3_config) -> z3_context;
    val Z3_mk_context_rc_ptr = DynLink.dlsym(hndl, "Z3_mk_context_rc")
  in
    dyn_Z3_mk_context_rc Z3_mk_context_rc_ptr (c)
  end

  fun Z3_theory_get_ext_data (t) = 
  let
    val dyn_Z3_theory_get_ext_data = _import * : DynLink.fptr -> (z3_theory) -> z3_theory_data;
    val Z3_theory_get_ext_data_ptr = DynLink.dlsym(hndl, "Z3_theory_get_ext_data")
  in
    dyn_Z3_theory_get_ext_data Z3_theory_get_ext_data_ptr (t)
  end

  fun Z3_get_smtlib_error (c) = 
  let
    val dyn_Z3_get_smtlib_error = _import * : DynLink.fptr -> (z3_context) -> z3_string;
    val Z3_get_smtlib_error_ptr = DynLink.dlsym(hndl, "Z3_get_smtlib_error")
  in
    dyn_Z3_get_smtlib_error Z3_get_smtlib_error_ptr (c)
  end

  fun Z3_mk_div (c,arg1,arg2) = 
  let
    val dyn_Z3_mk_div = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_div_ptr = DynLink.dlsym(hndl, "Z3_mk_div")
  in
    dyn_Z3_mk_div Z3_mk_div_ptr (c,arg1,arg2)
  end

  fun Z3_goal_to_string (c,g) = 
  let
    val dyn_Z3_goal_to_string = _import * : DynLink.fptr -> (z3_context * z3_goal) -> z3_string;
    val Z3_goal_to_string_ptr = DynLink.dlsym(hndl, "Z3_goal_to_string")
  in
    dyn_Z3_goal_to_string Z3_goal_to_string_ptr (c,g)
  end

  fun Z3_get_tuple_sort_mk_decl (c,t) = 
  let
    val dyn_Z3_get_tuple_sort_mk_decl = _import * : DynLink.fptr -> (z3_context * z3_sort) -> z3_func_decl;
    val Z3_get_tuple_sort_mk_decl_ptr = DynLink.dlsym(hndl, "Z3_get_tuple_sort_mk_decl")
  in
    dyn_Z3_get_tuple_sort_mk_decl Z3_get_tuple_sort_mk_decl_ptr (c,t)
  end

  fun Z3_fixedpoint_register_relation (c,d,f) = 
  let
    val dyn_Z3_fixedpoint_register_relation = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint * z3_func_decl) -> unit;
    val Z3_fixedpoint_register_relation_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_register_relation")
  in
    dyn_Z3_fixedpoint_register_relation Z3_fixedpoint_register_relation_ptr (c,d,f)
  end

  fun Z3_mk_bvadd (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvadd = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvadd_ptr = DynLink.dlsym(hndl, "Z3_mk_bvadd")
  in
    dyn_Z3_mk_bvadd Z3_mk_bvadd_ptr (c,t1,t2)
  end

  fun Z3_stats_size (c,s) = 
  let
    val dyn_Z3_stats_size = _import * : DynLink.fptr -> (z3_context * z3_stats) -> int;
    val Z3_stats_size_ptr = DynLink.dlsym(hndl, "Z3_stats_size")
  in
    dyn_Z3_stats_size Z3_stats_size_ptr (c,s)
  end

  fun Z3_mk_params (c) = 
  let
    val dyn_Z3_mk_params = _import * : DynLink.fptr -> (z3_context) -> z3_params;
    val Z3_mk_params_ptr = DynLink.dlsym(hndl, "Z3_mk_params")
  in
    dyn_Z3_mk_params Z3_mk_params_ptr (c)
  end

  fun Z3_mk_real_sort (c) = 
  let
    val dyn_Z3_mk_real_sort = _import * : DynLink.fptr -> (z3_context) -> z3_sort;
    val Z3_mk_real_sort_ptr = DynLink.dlsym(hndl, "Z3_mk_real_sort")
  in
    dyn_Z3_mk_real_sort Z3_mk_real_sort_ptr (c)
  end

  fun Z3_solver_get_assertions (c,s) = 
  let
    val dyn_Z3_solver_get_assertions = _import * : DynLink.fptr -> (z3_context * z3_solver) -> z3_ast_vector;
    val Z3_solver_get_assertions_ptr = DynLink.dlsym(hndl, "Z3_solver_get_assertions")
  in
    dyn_Z3_solver_get_assertions Z3_solver_get_assertions_ptr (c,s)
  end

  fun Z3_mk_simple_solver (c) = 
  let
    val dyn_Z3_mk_simple_solver = _import * : DynLink.fptr -> (z3_context) -> z3_solver;
    val Z3_mk_simple_solver_ptr = DynLink.dlsym(hndl, "Z3_mk_simple_solver")
  in
    dyn_Z3_mk_simple_solver Z3_mk_simple_solver_ptr (c)
  end

  fun Z3_theory_get_num_parents (t,n) = 
  let
    val dyn_Z3_theory_get_num_parents = _import * : DynLink.fptr -> (z3_theory * z3_ast) -> int;
    val Z3_theory_get_num_parents_ptr = DynLink.dlsym(hndl, "Z3_theory_get_num_parents")
  in
    dyn_Z3_theory_get_num_parents Z3_theory_get_num_parents_ptr (t,n)
  end

  fun Z3_theory_get_eqc_root (t,n) = 
  let
    val dyn_Z3_theory_get_eqc_root = _import * : DynLink.fptr -> (z3_theory * z3_ast) -> z3_ast;
    val Z3_theory_get_eqc_root_ptr = DynLink.dlsym(hndl, "Z3_theory_get_eqc_root")
  in
    dyn_Z3_theory_get_eqc_root Z3_theory_get_eqc_root_ptr (t,n)
  end

  fun Z3_get_numeral_int64 (c,v,i) = 
  let
    val dyn_Z3_get_numeral_int64 = _import * : DynLink.fptr -> (z3_context * z3_ast * MLton.Pointer.t) -> z3_bool;
    val Z3_get_numeral_int64_ptr = DynLink.dlsym(hndl, "Z3_get_numeral_int64")
  in
    dyn_Z3_get_numeral_int64 Z3_get_numeral_int64_ptr (c,v,i)
  end

  fun Z3_get_smtlib_num_formulas (c) = 
  let
    val dyn_Z3_get_smtlib_num_formulas = _import * : DynLink.fptr -> (z3_context) -> int;
    val Z3_get_smtlib_num_formulas_ptr = DynLink.dlsym(hndl, "Z3_get_smtlib_num_formulas")
  in
    dyn_Z3_get_smtlib_num_formulas Z3_get_smtlib_num_formulas_ptr (c)
  end

  fun Z3_mk_map (c,f,n,args) = 
  let
    val dyn_Z3_mk_map = _import * : DynLink.fptr -> (z3_context * z3_func_decl * int * MLton.Pointer.t) -> z3_ast;
    val Z3_mk_map_ptr = DynLink.dlsym(hndl, "Z3_mk_map")
  in
    dyn_Z3_mk_map Z3_mk_map_ptr (c,f,n,args)
  end

  fun Z3_get_model_func_entry_value (c,m,i,j) = 
  let
    val dyn_Z3_get_model_func_entry_value = _import * : DynLink.fptr -> (z3_context * z3_model * int * int) -> z3_ast;
    val Z3_get_model_func_entry_value_ptr = DynLink.dlsym(hndl, "Z3_get_model_func_entry_value")
  in
    dyn_Z3_get_model_func_entry_value Z3_get_model_func_entry_value_ptr (c,m,i,j)
  end

  fun Z3_open_log (filename) = 
  let
    val dyn_Z3_open_log = _import * : DynLink.fptr -> (z3_string) -> z3_bool;
    val Z3_open_log_ptr = DynLink.dlsym(hndl, "Z3_open_log")
  in
    dyn_Z3_open_log Z3_open_log_ptr (filename)
  end

  fun Z3_ast_vector_dec_ref (c,v) = 
  let
    val dyn_Z3_ast_vector_dec_ref = _import * : DynLink.fptr -> (z3_context * z3_ast_vector) -> unit;
    val Z3_ast_vector_dec_ref_ptr = DynLink.dlsym(hndl, "Z3_ast_vector_dec_ref")
  in
    dyn_Z3_ast_vector_dec_ref Z3_ast_vector_dec_ref_ptr (c,v)
  end

  fun Z3_ast_map_inc_ref (c,m) = 
  let
    val dyn_Z3_ast_map_inc_ref = _import * : DynLink.fptr -> (z3_context * z3_ast_map) -> unit;
    val Z3_ast_map_inc_ref_ptr = DynLink.dlsym(hndl, "Z3_ast_map_inc_ref")
  in
    dyn_Z3_ast_map_inc_ref Z3_ast_map_inc_ref_ptr (c,m)
  end

  fun Z3_params_dec_ref (c,p) = 
  let
    val dyn_Z3_params_dec_ref = _import * : DynLink.fptr -> (z3_context * z3_params) -> unit;
    val Z3_params_dec_ref_ptr = DynLink.dlsym(hndl, "Z3_params_dec_ref")
  in
    dyn_Z3_params_dec_ref Z3_params_dec_ref_ptr (c,p)
  end

  fun Z3_mk_bvnot (c,t1) = 
  let
    val dyn_Z3_mk_bvnot = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_ast;
    val Z3_mk_bvnot_ptr = DynLink.dlsym(hndl, "Z3_mk_bvnot")
  in
    dyn_Z3_mk_bvnot Z3_mk_bvnot_ptr (c,t1)
  end

  fun Z3_set_reduce_app_callback (t,f) = 
  let
    val dyn_Z3_set_reduce_app_callback = _import * : DynLink.fptr -> (z3_theory * MLton.Pointer.t) -> unit;
    val Z3_set_reduce_app_callback_ptr = DynLink.dlsym(hndl, "Z3_set_reduce_app_callback")
  in
    dyn_Z3_set_reduce_app_callback Z3_set_reduce_app_callback_ptr (t,f)
  end

  fun Z3_mk_bool_sort (c) = 
  let
    val dyn_Z3_mk_bool_sort = _import * : DynLink.fptr -> (z3_context) -> z3_sort;
    val Z3_mk_bool_sort_ptr = DynLink.dlsym(hndl, "Z3_mk_bool_sort")
  in
    dyn_Z3_mk_bool_sort Z3_mk_bool_sort_ptr (c)
  end

  fun Z3_mk_int64 (c,v,ty) = 
  let
    val dyn_Z3_mk_int64 = _import * : DynLink.fptr -> (z3_context * int * z3_sort) -> z3_ast;
    val Z3_mk_int64_ptr = DynLink.dlsym(hndl, "Z3_mk_int64")
  in
    dyn_Z3_mk_int64 Z3_mk_int64_ptr (c,v,ty)
  end

  fun Z3_stats_inc_ref (c,s) = 
  let
    val dyn_Z3_stats_inc_ref = _import * : DynLink.fptr -> (z3_context * z3_stats) -> unit;
    val Z3_stats_inc_ref_ptr = DynLink.dlsym(hndl, "Z3_stats_inc_ref")
  in
    dyn_Z3_stats_inc_ref Z3_stats_inc_ref_ptr (c,s)
  end

  fun Z3_mk_mod (c,arg1,arg2) = 
  let
    val dyn_Z3_mk_mod = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_mod_ptr = DynLink.dlsym(hndl, "Z3_mk_mod")
  in
    dyn_Z3_mk_mod Z3_mk_mod_ptr (c,arg1,arg2)
  end

  fun Z3_tactic_get_help (c,t) = 
  let
    val dyn_Z3_tactic_get_help = _import * : DynLink.fptr -> (z3_context * z3_tactic) -> z3_string;
    val Z3_tactic_get_help_ptr = DynLink.dlsym(hndl, "Z3_tactic_get_help")
  in
    dyn_Z3_tactic_get_help Z3_tactic_get_help_ptr (c,t)
  end

  fun Z3_mk_bvor (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvor = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvor_ptr = DynLink.dlsym(hndl, "Z3_mk_bvor")
  in
    dyn_Z3_mk_bvor Z3_mk_bvor_ptr (c,t1,t2)
  end

  fun Z3_tactic_try_for (c,t,ms) = 
  let
    val dyn_Z3_tactic_try_for = _import * : DynLink.fptr -> (z3_context * z3_tactic * int) -> z3_tactic;
    val Z3_tactic_try_for_ptr = DynLink.dlsym(hndl, "Z3_tactic_try_for")
  in
    dyn_Z3_tactic_try_for Z3_tactic_try_for_ptr (c,t,ms)
  end

  fun Z3_get_quantifier_pattern_ast (c,a,i) = 
  let
    val dyn_Z3_get_quantifier_pattern_ast = _import * : DynLink.fptr -> (z3_context * z3_ast * int) -> z3_pattern;
    val Z3_get_quantifier_pattern_ast_ptr = DynLink.dlsym(hndl, "Z3_get_quantifier_pattern_ast")
  in
    dyn_Z3_get_quantifier_pattern_ast Z3_get_quantifier_pattern_ast_ptr (c,a,i)
  end

  fun Z3_get_datatype_sort_num_constructors (c,t) = 
  let
    val dyn_Z3_get_datatype_sort_num_constructors = _import * : DynLink.fptr -> (z3_context * z3_sort) -> int;
    val Z3_get_datatype_sort_num_constructors_ptr = DynLink.dlsym(hndl, "Z3_get_datatype_sort_num_constructors")
  in
    dyn_Z3_get_datatype_sort_num_constructors Z3_get_datatype_sort_num_constructors_ptr (c,t)
  end

  fun Z3_mk_list_sort (c,name,elem_sort,nil_decl,is_nil_decl,cons_decl,is_cons_decl,head_decl,tail_decl) = 
  let
    val dyn_Z3_mk_list_sort = _import * : DynLink.fptr -> (z3_context * z3_symbol * z3_sort * MLton.Pointer.t * MLton.Pointer.t * MLton.Pointer.t * MLton.Pointer.t * MLton.Pointer.t * MLton.Pointer.t) -> z3_sort;
    val Z3_mk_list_sort_ptr = DynLink.dlsym(hndl, "Z3_mk_list_sort")
  in
    dyn_Z3_mk_list_sort Z3_mk_list_sort_ptr (c,name,elem_sort,nil_decl,is_nil_decl,cons_decl,is_cons_decl,head_decl,tail_decl)
  end

  fun Z3_translate (source,a,target) = 
  let
    val dyn_Z3_translate = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_context) -> z3_ast;
    val Z3_translate_ptr = DynLink.dlsym(hndl, "Z3_translate")
  in
    dyn_Z3_translate Z3_translate_ptr (source,a,target)
  end

  fun Z3_mk_context (c) = 
  let
    val dyn_Z3_mk_context = _import * : DynLink.fptr -> (z3_config) -> z3_context;
    val Z3_mk_context_ptr = DynLink.dlsym(hndl, "Z3_mk_context")
  in
    dyn_Z3_mk_context Z3_mk_context_ptr (c)
  end

  fun Z3_get_datatype_sort_constructor_accessor (c,t,idx_c,idx_a) = 
  let
    val dyn_Z3_get_datatype_sort_constructor_accessor = _import * : DynLink.fptr -> (z3_context * z3_sort * int * int) -> z3_func_decl;
    val Z3_get_datatype_sort_constructor_accessor_ptr = DynLink.dlsym(hndl, "Z3_get_datatype_sort_constructor_accessor")
  in
    dyn_Z3_get_datatype_sort_constructor_accessor Z3_get_datatype_sort_constructor_accessor_ptr (c,t,idx_c,idx_a)
  end

  fun Z3_mk_bvashr (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvashr = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvashr_ptr = DynLink.dlsym(hndl, "Z3_mk_bvashr")
  in
    dyn_Z3_mk_bvashr Z3_mk_bvashr_ptr (c,t1,t2)
  end

  fun Z3_mk_sub (c,num_args,args) = 
  let
    val dyn_Z3_mk_sub = _import * : DynLink.fptr -> (z3_context * int * MLton.Pointer.t) -> z3_ast;
    val Z3_mk_sub_ptr = DynLink.dlsym(hndl, "Z3_mk_sub")
  in
    dyn_Z3_mk_sub Z3_mk_sub_ptr (c,num_args,args)
  end

  fun Z3_mk_fixedpoint (c) = 
  let
    val dyn_Z3_mk_fixedpoint = _import * : DynLink.fptr -> (z3_context) -> z3_fixedpoint;
    val Z3_mk_fixedpoint_ptr = DynLink.dlsym(hndl, "Z3_mk_fixedpoint")
  in
    dyn_Z3_mk_fixedpoint Z3_mk_fixedpoint_ptr (c)
  end

  fun Z3_solver_get_help (c,s) = 
  let
    val dyn_Z3_solver_get_help = _import * : DynLink.fptr -> (z3_context * z3_solver) -> z3_string;
    val Z3_solver_get_help_ptr = DynLink.dlsym(hndl, "Z3_solver_get_help")
  in
    dyn_Z3_solver_get_help Z3_solver_get_help_ptr (c,s)
  end

  fun Z3_mk_rotate_right (c,i,t1) = 
  let
    val dyn_Z3_mk_rotate_right = _import * : DynLink.fptr -> (z3_context * int * z3_ast) -> z3_ast;
    val Z3_mk_rotate_right_ptr = DynLink.dlsym(hndl, "Z3_mk_rotate_right")
  in
    dyn_Z3_mk_rotate_right Z3_mk_rotate_right_ptr (c,i,t1)
  end

  fun Z3_mk_bvnor (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvnor = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvnor_ptr = DynLink.dlsym(hndl, "Z3_mk_bvnor")
  in
    dyn_Z3_mk_bvnor Z3_mk_bvnor_ptr (c,t1,t2)
  end

  fun Z3_apply_result_to_string (c,r) = 
  let
    val dyn_Z3_apply_result_to_string = _import * : DynLink.fptr -> (z3_context * z3_apply_result) -> z3_string;
    val Z3_apply_result_to_string_ptr = DynLink.dlsym(hndl, "Z3_apply_result_to_string")
  in
    dyn_Z3_apply_result_to_string Z3_apply_result_to_string_ptr (c,r)
  end

  fun Z3_probe_and (x,p1,p2) = 
  let
    val dyn_Z3_probe_and = _import * : DynLink.fptr -> (z3_context * z3_probe * z3_probe) -> z3_probe;
    val Z3_probe_and_ptr = DynLink.dlsym(hndl, "Z3_probe_and")
  in
    dyn_Z3_probe_and Z3_probe_and_ptr (x,p1,p2)
  end

  fun Z3_set_final_check_callback (t,f) = 
  let
    val dyn_Z3_set_final_check_callback = _import * : DynLink.fptr -> (z3_theory * MLton.Pointer.t) -> unit;
    val Z3_set_final_check_callback_ptr = DynLink.dlsym(hndl, "Z3_set_final_check_callback")
  in
    dyn_Z3_set_final_check_callback Z3_set_final_check_callback_ptr (t,f)
  end

  fun Z3_get_literal (c,lbls,idx) = 
  let
    val dyn_Z3_get_literal = _import * : DynLink.fptr -> (z3_context * z3_literals * int) -> z3_ast;
    val Z3_get_literal_ptr = DynLink.dlsym(hndl, "Z3_get_literal")
  in
    dyn_Z3_get_literal Z3_get_literal_ptr (c,lbls,idx)
  end

  fun Z3_get_sort (c,a) = 
  let
    val dyn_Z3_get_sort = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_sort;
    val Z3_get_sort_ptr = DynLink.dlsym(hndl, "Z3_get_sort")
  in
    dyn_Z3_get_sort Z3_get_sort_ptr (c,a)
  end

  fun Z3_mk_goal (c,models,unsat_cores,proofs) = 
  let
    val dyn_Z3_mk_goal = _import * : DynLink.fptr -> (z3_context * z3_bool * z3_bool * z3_bool) -> z3_goal;
    val Z3_mk_goal_ptr = DynLink.dlsym(hndl, "Z3_mk_goal")
  in
    dyn_Z3_mk_goal Z3_mk_goal_ptr (c,models,unsat_cores,proofs)
  end

  fun Z3_mk_bvsrem (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvsrem = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvsrem_ptr = DynLink.dlsym(hndl, "Z3_mk_bvsrem")
  in
    dyn_Z3_mk_bvsrem Z3_mk_bvsrem_ptr (c,t1,t2)
  end

  fun Z3_goal_num_exprs (c,g) = 
  let
    val dyn_Z3_goal_num_exprs = _import * : DynLink.fptr -> (z3_context * z3_goal) -> int;
    val Z3_goal_num_exprs_ptr = DynLink.dlsym(hndl, "Z3_goal_num_exprs")
  in
    dyn_Z3_goal_num_exprs Z3_goal_num_exprs_ptr (c,g)
  end

  fun Z3_ast_map_insert (c,m,k,v) = 
  let
    val dyn_Z3_ast_map_insert = _import * : DynLink.fptr -> (z3_context * z3_ast_map * z3_ast * z3_ast) -> unit;
    val Z3_ast_map_insert_ptr = DynLink.dlsym(hndl, "Z3_ast_map_insert")
  in
    dyn_Z3_ast_map_insert Z3_ast_map_insert_ptr (c,m,k,v)
  end

  fun Z3_func_entry_get_num_args (c,e) = 
  let
    val dyn_Z3_func_entry_get_num_args = _import * : DynLink.fptr -> (z3_context * z3_func_entry) -> int;
    val Z3_func_entry_get_num_args_ptr = DynLink.dlsym(hndl, "Z3_func_entry_get_num_args")
  in
    dyn_Z3_func_entry_get_num_args Z3_func_entry_get_num_args_ptr (c,e)
  end

  fun Z3_mk_bvadd_no_overflow (c,t1,t2,is_signed) = 
  let
    val dyn_Z3_mk_bvadd_no_overflow = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast * z3_bool) -> z3_ast;
    val Z3_mk_bvadd_no_overflow_ptr = DynLink.dlsym(hndl, "Z3_mk_bvadd_no_overflow")
  in
    dyn_Z3_mk_bvadd_no_overflow Z3_mk_bvadd_no_overflow_ptr (c,t1,t2,is_signed)
  end

  fun Z3_mk_forall (c,weight,num_patterns,patterns,num_decls,sorts,decl_names,body) = 
  let
    val dyn_Z3_mk_forall = _import * : DynLink.fptr -> (z3_context * int * int * MLton.Pointer.t * int * MLton.Pointer.t * MLton.Pointer.t * z3_ast) -> z3_ast;
    val Z3_mk_forall_ptr = DynLink.dlsym(hndl, "Z3_mk_forall")
  in
    dyn_Z3_mk_forall Z3_mk_forall_ptr (c,weight,num_patterns,patterns,num_decls,sorts,decl_names,body)
  end

  fun Z3_probe_eq (x,p1,p2) = 
  let
    val dyn_Z3_probe_eq = _import * : DynLink.fptr -> (z3_context * z3_probe * z3_probe) -> z3_probe;
    val Z3_probe_eq_ptr = DynLink.dlsym(hndl, "Z3_probe_eq")
  in
    dyn_Z3_probe_eq Z3_probe_eq_ptr (x,p1,p2)
  end

  fun Z3_solver_get_reason_unknown (c,s) = 
  let
    val dyn_Z3_solver_get_reason_unknown = _import * : DynLink.fptr -> (z3_context * z3_solver) -> z3_string;
    val Z3_solver_get_reason_unknown_ptr = DynLink.dlsym(hndl, "Z3_solver_get_reason_unknown")
  in
    dyn_Z3_solver_get_reason_unknown Z3_solver_get_reason_unknown_ptr (c,s)
  end

  fun Z3_get_decl_rational_parameter (c,d,idx) = 
  let
    val dyn_Z3_get_decl_rational_parameter = _import * : DynLink.fptr -> (z3_context * z3_func_decl * int) -> z3_string;
    val Z3_get_decl_rational_parameter_ptr = DynLink.dlsym(hndl, "Z3_get_decl_rational_parameter")
  in
    dyn_Z3_get_decl_rational_parameter Z3_get_decl_rational_parameter_ptr (c,d,idx)
  end

  fun Z3_get_decl_sort_parameter (c,d,idx) = 
  let
    val dyn_Z3_get_decl_sort_parameter = _import * : DynLink.fptr -> (z3_context * z3_func_decl * int) -> z3_sort;
    val Z3_get_decl_sort_parameter_ptr = DynLink.dlsym(hndl, "Z3_get_decl_sort_parameter")
  in
    dyn_Z3_get_decl_sort_parameter Z3_get_decl_sort_parameter_ptr (c,d,idx)
  end

  fun Z3_get_num_scopes (c) = 
  let
    val dyn_Z3_get_num_scopes = _import * : DynLink.fptr -> (z3_context) -> int;
    val Z3_get_num_scopes_ptr = DynLink.dlsym(hndl, "Z3_get_num_scopes")
  in
    dyn_Z3_get_num_scopes Z3_get_num_scopes_ptr (c)
  end

  fun Z3_tactic_repeat (c,t,max) = 
  let
    val dyn_Z3_tactic_repeat = _import * : DynLink.fptr -> (z3_context * z3_tactic * int) -> z3_tactic;
    val Z3_tactic_repeat_ptr = DynLink.dlsym(hndl, "Z3_tactic_repeat")
  in
    dyn_Z3_tactic_repeat Z3_tactic_repeat_ptr (c,t,max)
  end

  fun Z3_set_restart_callback (t,f) = 
  let
    val dyn_Z3_set_restart_callback = _import * : DynLink.fptr -> (z3_theory * MLton.Pointer.t) -> unit;
    val Z3_set_restart_callback_ptr = DynLink.dlsym(hndl, "Z3_set_restart_callback")
  in
    dyn_Z3_set_restart_callback Z3_set_restart_callback_ptr (t,f)
  end

  fun Z3_fixedpoint_add_fact (c,d,r,num_args,args) = 
  let
    val dyn_Z3_fixedpoint_add_fact = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint * z3_func_decl * int * MLton.Pointer.t) -> unit;
    val Z3_fixedpoint_add_fact_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_add_fact")
  in
    dyn_Z3_fixedpoint_add_fact Z3_fixedpoint_add_fact_ptr (c,d,r,num_args,args)
  end

  fun Z3_interrupt (c) = 
  let
    val dyn_Z3_interrupt = _import * : DynLink.fptr -> (z3_context) -> unit;
    val Z3_interrupt_ptr = DynLink.dlsym(hndl, "Z3_interrupt")
  in
    dyn_Z3_interrupt Z3_interrupt_ptr (c)
  end

  fun Z3_fixedpoint_get_reason_unknown (c,d) = 
  let
    val dyn_Z3_fixedpoint_get_reason_unknown = _import * : DynLink.fptr -> (z3_context * z3_fixedpoint) -> z3_string;
    val Z3_fixedpoint_get_reason_unknown_ptr = DynLink.dlsym(hndl, "Z3_fixedpoint_get_reason_unknown")
  in
    dyn_Z3_fixedpoint_get_reason_unknown Z3_fixedpoint_get_reason_unknown_ptr (c,d)
  end

  fun Z3_set_new_relevant_callback (t,f) = 
  let
    val dyn_Z3_set_new_relevant_callback = _import * : DynLink.fptr -> (z3_theory * MLton.Pointer.t) -> unit;
    val Z3_set_new_relevant_callback_ptr = DynLink.dlsym(hndl, "Z3_set_new_relevant_callback")
  in
    dyn_Z3_set_new_relevant_callback Z3_set_new_relevant_callback_ptr (t,f)
  end

  fun Z3_simplify_get_help (c) = 
  let
    val dyn_Z3_simplify_get_help = _import * : DynLink.fptr -> (z3_context) -> z3_string;
    val Z3_simplify_get_help_ptr = DynLink.dlsym(hndl, "Z3_simplify_get_help")
  in
    dyn_Z3_simplify_get_help Z3_simplify_get_help_ptr (c)
  end

  fun Z3_mk_bvsdiv_no_overflow (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvsdiv_no_overflow = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvsdiv_no_overflow_ptr = DynLink.dlsym(hndl, "Z3_mk_bvsdiv_no_overflow")
  in
    dyn_Z3_mk_bvsdiv_no_overflow Z3_mk_bvsdiv_no_overflow_ptr (c,t1,t2)
  end

  fun Z3_probe_ge (x,p1,p2) = 
  let
    val dyn_Z3_probe_ge = _import * : DynLink.fptr -> (z3_context * z3_probe * z3_probe) -> z3_probe;
    val Z3_probe_ge_ptr = DynLink.dlsym(hndl, "Z3_probe_ge")
  in
    dyn_Z3_probe_ge Z3_probe_ge_ptr (x,p1,p2)
  end

  fun Z3_eval (c,m,t,v) = 
  let
    val dyn_Z3_eval = _import * : DynLink.fptr -> (z3_context * z3_model * z3_ast * MLton.Pointer.t) -> z3_bool;
    val Z3_eval_ptr = DynLink.dlsym(hndl, "Z3_eval")
  in
    dyn_Z3_eval Z3_eval_ptr (c,m,t,v)
  end

  fun Z3_get_quantifier_bound_sort (c,a,i) = 
  let
    val dyn_Z3_get_quantifier_bound_sort = _import * : DynLink.fptr -> (z3_context * z3_ast * int) -> z3_sort;
    val Z3_get_quantifier_bound_sort_ptr = DynLink.dlsym(hndl, "Z3_get_quantifier_bound_sort")
  in
    dyn_Z3_get_quantifier_bound_sort Z3_get_quantifier_bound_sort_ptr (c,a,i)
  end

  fun Z3_mk_rem (c,arg1,arg2) = 
  let
    val dyn_Z3_mk_rem = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_rem_ptr = DynLink.dlsym(hndl, "Z3_mk_rem")
  in
    dyn_Z3_mk_rem Z3_mk_rem_ptr (c,arg1,arg2)
  end

  fun Z3_get_algebraic_number_lower (c,a,precision) = 
  let
    val dyn_Z3_get_algebraic_number_lower = _import * : DynLink.fptr -> (z3_context * z3_ast * int) -> z3_ast;
    val Z3_get_algebraic_number_lower_ptr = DynLink.dlsym(hndl, "Z3_get_algebraic_number_lower")
  in
    dyn_Z3_get_algebraic_number_lower Z3_get_algebraic_number_lower_ptr (c,a,precision)
  end

  fun Z3_goal_precision (c,g) = 
  let
    val dyn_Z3_goal_precision = _import * : DynLink.fptr -> (z3_context * z3_goal) -> z3_goal_prec;
    val Z3_goal_precision_ptr = DynLink.dlsym(hndl, "Z3_goal_precision")
  in
    dyn_Z3_goal_precision Z3_goal_precision_ptr (c,g)
  end

  fun Z3_mk_bvsge (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvsge = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvsge_ptr = DynLink.dlsym(hndl, "Z3_mk_bvsge")
  in
    dyn_Z3_mk_bvsge Z3_mk_bvsge_ptr (c,t1,t2)
  end

  fun Z3_get_model_func_entry_arg (c,m,i,j,k) = 
  let
    val dyn_Z3_get_model_func_entry_arg = _import * : DynLink.fptr -> (z3_context * z3_model * int * int * int) -> z3_ast;
    val Z3_get_model_func_entry_arg_ptr = DynLink.dlsym(hndl, "Z3_get_model_func_entry_arg")
  in
    dyn_Z3_get_model_func_entry_arg Z3_get_model_func_entry_arg_ptr (c,m,i,j,k)
  end

  fun Z3_mk_bvsle (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvsle = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvsle_ptr = DynLink.dlsym(hndl, "Z3_mk_bvsle")
  in
    dyn_Z3_mk_bvsle Z3_mk_bvsle_ptr (c,t1,t2)
  end

  fun Z3_mk_theory (c,th_name,data) = 
  let
    val dyn_Z3_mk_theory = _import * : DynLink.fptr -> (z3_context * z3_string * z3_theory_data) -> z3_theory;
    val Z3_mk_theory_ptr = DynLink.dlsym(hndl, "Z3_mk_theory")
  in
    dyn_Z3_mk_theory Z3_mk_theory_ptr (c,th_name,data)
  end

  fun Z3_get_smtlib_num_decls (c) = 
  let
    val dyn_Z3_get_smtlib_num_decls = _import * : DynLink.fptr -> (z3_context) -> int;
    val Z3_get_smtlib_num_decls_ptr = DynLink.dlsym(hndl, "Z3_get_smtlib_num_decls")
  in
    dyn_Z3_get_smtlib_num_decls Z3_get_smtlib_num_decls_ptr (c)
  end

  fun Z3_mk_bvsgt (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvsgt = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvsgt_ptr = DynLink.dlsym(hndl, "Z3_mk_bvsgt")
  in
    dyn_Z3_mk_bvsgt Z3_mk_bvsgt_ptr (c,t1,t2)
  end

  fun Z3_get_error_msg_ex (c,err) = 
  let
    val dyn_Z3_get_error_msg_ex = _import * : DynLink.fptr -> (z3_context * z3_error_code) -> z3_string;
    val Z3_get_error_msg_ex_ptr = DynLink.dlsym(hndl, "Z3_get_error_msg_ex")
  in
    dyn_Z3_get_error_msg_ex Z3_get_error_msg_ex_ptr (c,err)
  end

  fun Z3_model_get_num_sorts (c,m) = 
  let
    val dyn_Z3_model_get_num_sorts = _import * : DynLink.fptr -> (z3_context * z3_model) -> int;
    val Z3_model_get_num_sorts_ptr = DynLink.dlsym(hndl, "Z3_model_get_num_sorts")
  in
    dyn_Z3_model_get_num_sorts Z3_model_get_num_sorts_ptr (c,m)
  end

  fun Z3_mk_injective_function (c,s,domain_size,domain,range) = 
  let
    val dyn_Z3_mk_injective_function = _import * : DynLink.fptr -> (z3_context * z3_symbol * int * MLton.Pointer.t * z3_sort) -> z3_func_decl;
    val Z3_mk_injective_function_ptr = DynLink.dlsym(hndl, "Z3_mk_injective_function")
  in
    dyn_Z3_mk_injective_function Z3_mk_injective_function_ptr (c,s,domain_size,domain,range)
  end

  fun Z3_query_constructor (c,constr,num_fields,constructor,tester,accessors) = 
  let
    val dyn_Z3_query_constructor = _import * : DynLink.fptr -> (z3_context * z3_constructor * int * MLton.Pointer.t * MLton.Pointer.t * MLton.Pointer.t) -> unit;
    val Z3_query_constructor_ptr = DynLink.dlsym(hndl, "Z3_query_constructor")
  in
    dyn_Z3_query_constructor Z3_query_constructor_ptr (c,constr,num_fields,constructor,tester,accessors)
  end

  fun Z3_func_decl_to_string (c,d) = 
  let
    val dyn_Z3_func_decl_to_string = _import * : DynLink.fptr -> (z3_context * z3_func_decl) -> z3_string;
    val Z3_func_decl_to_string_ptr = DynLink.dlsym(hndl, "Z3_func_decl_to_string")
  in
    dyn_Z3_func_decl_to_string Z3_func_decl_to_string_ptr (c,d)
  end

  fun Z3_solver_get_unsat_core (c,s) = 
  let
    val dyn_Z3_solver_get_unsat_core = _import * : DynLink.fptr -> (z3_context * z3_solver) -> z3_ast_vector;
    val Z3_solver_get_unsat_core_ptr = DynLink.dlsym(hndl, "Z3_solver_get_unsat_core")
  in
    dyn_Z3_solver_get_unsat_core Z3_solver_get_unsat_core_ptr (c,s)
  end

  fun Z3_solver_check_assumptions (c,s,num_assumptions,assumptions) = 
  let
    val dyn_Z3_solver_check_assumptions = _import * : DynLink.fptr -> (z3_context * z3_solver * int * MLton.Pointer.t) -> z3_lbool;
    val Z3_solver_check_assumptions_ptr = DynLink.dlsym(hndl, "Z3_solver_check_assumptions")
  in
    dyn_Z3_solver_check_assumptions Z3_solver_check_assumptions_ptr (c,s,num_assumptions,assumptions)
  end

  fun Z3_statistics_to_string (c) = 
  let
    val dyn_Z3_statistics_to_string = _import * : DynLink.fptr -> (z3_context) -> z3_string;
    val Z3_statistics_to_string_ptr = DynLink.dlsym(hndl, "Z3_statistics_to_string")
  in
    dyn_Z3_statistics_to_string Z3_statistics_to_string_ptr (c)
  end

  fun Z3_mk_bvadd_no_underflow (c,t1,t2) = 
  let
    val dyn_Z3_mk_bvadd_no_underflow = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_bvadd_no_underflow_ptr = DynLink.dlsym(hndl, "Z3_mk_bvadd_no_underflow")
  in
    dyn_Z3_mk_bvadd_no_underflow Z3_mk_bvadd_no_underflow_ptr (c,t1,t2)
  end

  fun Z3_mk_real2int (c,t1) = 
  let
    val dyn_Z3_mk_real2int = _import * : DynLink.fptr -> (z3_context * z3_ast) -> z3_ast;
    val Z3_mk_real2int_ptr = DynLink.dlsym(hndl, "Z3_mk_real2int")
  in
    dyn_Z3_mk_real2int Z3_mk_real2int_ptr (c,t1)
  end

  fun Z3_ast_vector_get (c,v,i) = 
  let
    val dyn_Z3_ast_vector_get = _import * : DynLink.fptr -> (z3_context * z3_ast_vector * int) -> z3_ast;
    val Z3_ast_vector_get_ptr = DynLink.dlsym(hndl, "Z3_ast_vector_get")
  in
    dyn_Z3_ast_vector_get Z3_ast_vector_get_ptr (c,v,i)
  end

  fun Z3_mk_gt (c,t1,t2) = 
  let
    val dyn_Z3_mk_gt = _import * : DynLink.fptr -> (z3_context * z3_ast * z3_ast) -> z3_ast;
    val Z3_mk_gt_ptr = DynLink.dlsym(hndl, "Z3_mk_gt")
  in
    dyn_Z3_mk_gt Z3_mk_gt_ptr (c,t1,t2)
  end
end